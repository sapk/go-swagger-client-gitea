// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// CreateOrgRepoReader is a Reader for the CreateOrgRepo structure.
type CreateOrgRepoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrgRepoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateOrgRepoCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewCreateOrgRepoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewCreateOrgRepoUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOrgRepoCreated creates a CreateOrgRepoCreated with default headers values
func NewCreateOrgRepoCreated() *CreateOrgRepoCreated {
	return &CreateOrgRepoCreated{}
}

/*CreateOrgRepoCreated handles this case with default header values.

Repository
*/
type CreateOrgRepoCreated struct {
	Payload CreateOrgRepoCreatedBody
}

func (o *CreateOrgRepoCreated) Error() string {
	return fmt.Sprintf("[POST /org/{org}/repos][%d] createOrgRepoCreated  %+v", 201, o.Payload)
}

func (o *CreateOrgRepoCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOrgRepoForbidden creates a CreateOrgRepoForbidden with default headers values
func NewCreateOrgRepoForbidden() *CreateOrgRepoForbidden {
	return &CreateOrgRepoForbidden{}
}

/*CreateOrgRepoForbidden handles this case with default header values.

APIForbiddenError is a forbidden error response
*/
type CreateOrgRepoForbidden struct {
	Message string

	URL string
}

func (o *CreateOrgRepoForbidden) Error() string {
	return fmt.Sprintf("[POST /org/{org}/repos][%d] createOrgRepoForbidden ", 403)
}

func (o *CreateOrgRepoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

// NewCreateOrgRepoUnprocessableEntity creates a CreateOrgRepoUnprocessableEntity with default headers values
func NewCreateOrgRepoUnprocessableEntity() *CreateOrgRepoUnprocessableEntity {
	return &CreateOrgRepoUnprocessableEntity{}
}

/*CreateOrgRepoUnprocessableEntity handles this case with default header values.

APIValidationError is error format response related to input validation
*/
type CreateOrgRepoUnprocessableEntity struct {
	Message string

	URL string
}

func (o *CreateOrgRepoUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /org/{org}/repos][%d] createOrgRepoUnprocessableEntity ", 422)
}

func (o *CreateOrgRepoUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

/*CreateOrgRepoBody CreateRepoOption options when creating repository
swagger:model CreateOrgRepoBody
*/
type CreateOrgRepoBody struct {

	// Whether the repository should be auto-intialized?
	AutoInit bool `json:"auto_init,omitempty"`

	// Description of the repository to create
	Description string `json:"description,omitempty"`

	// Gitignores to use
	Gitignores string `json:"gitignores,omitempty"`

	// License to use
	License string `json:"license,omitempty"`

	// Name of the repository to create
	// Required: true
	// Unique: true
	Name *string `json:"name"`

	// Whether the repository is private
	Private bool `json:"private,omitempty"`

	// Readme of the repository to create
	Readme string `json:"readme,omitempty"`
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoBody) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBody Repository represents a repository
swagger:model CreateOrgRepoCreatedBody
*/
type CreateOrgRepoCreatedBody struct {

	// clone URL
	// Required: true
	CloneURL *string `json:"clone_url"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// default branch
	// Required: true
	DefaultBranch *string `json:"default_branch"`

	// description
	// Required: true
	Description *string `json:"description"`

	// empty
	// Required: true
	Empty *bool `json:"empty"`

	// fork
	// Required: true
	Fork *bool `json:"fork"`

	// forks
	// Required: true
	Forks *int64 `json:"forks_count"`

	// full name
	// Required: true
	FullName *string `json:"full_name"`

	// HTML URL
	// Required: true
	HTMLURL *string `json:"html_url"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// mirror
	// Required: true
	Mirror *bool `json:"mirror"`

	// name
	// Required: true
	Name *string `json:"name"`

	// open issues
	// Required: true
	OpenIssues *int64 `json:"open_issues_count"`

	// private
	// Required: true
	Private *bool `json:"private"`

	// SSH URL
	// Required: true
	SSHURL *string `json:"ssh_url"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// stars
	// Required: true
	Stars *int64 `json:"stars_count"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// watchers
	// Required: true
	Watchers *int64 `json:"watchers_count"`

	// website
	// Required: true
	Website *string `json:"website"`

	// owner
	// Required: true
	Owner *CreateOrgRepoCreatedBodyOwner `json:"owner"`

	// parent
	// Required: true
	Parent *CreateOrgRepoCreatedBodyParent `json:"parent"`

	// permissions
	// Required: true
	Permissions *CreateOrgRepoCreatedBodyPermissions `json:"permissions"`
}

// Validate validates this create org repo created body
func (o *CreateOrgRepoCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCloneURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmpty(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateForks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMirror(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOpenIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSSHURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStars(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWatchers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebsite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgRepoCreatedBody) validateCloneURL(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"clone_url", "body", o.CloneURL); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateDefaultBranch(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"default_branch", "body", o.DefaultBranch); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateEmpty(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"empty", "body", o.Empty); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateFork(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"fork", "body", o.Fork); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateForks(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"forks_count", "body", o.Forks); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"full_name", "body", o.FullName); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateMirror(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"mirror", "body", o.Mirror); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateOpenIssues(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"open_issues_count", "body", o.OpenIssues); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validatePrivate(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"private", "body", o.Private); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateSSHURL(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"ssh_url", "body", o.SSHURL); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"size", "body", o.Size); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateStars(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"stars_count", "body", o.Stars); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateWatchers(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"watchers_count", "body", o.Watchers); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateWebsite(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"website", "body", o.Website); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"owner", "body", o.Owner); err != nil {
		return err
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validateParent(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"parent", "body", o.Parent); err != nil {
		return err
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrgRepoCreatedBody) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("createOrgRepoCreated"+"."+"permissions", "body", o.Permissions); err != nil {
		return err
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyOwner User represents a user
swagger:model CreateOrgRepoCreatedBodyOwner
*/
type CreateOrgRepoCreatedBodyOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this create org repo created body owner
func (o *CreateOrgRepoCreatedBodyOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgRepoCreatedBodyOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyOwner) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyParent Repository represents a repository
swagger:model CreateOrgRepoCreatedBodyParent
*/
type CreateOrgRepoCreatedBodyParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *CreateOrgRepoCreatedBodyParentOwner `json:"owner,omitempty"`

	// parent
	Parent *CreateOrgRepoCreatedBodyParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *CreateOrgRepoCreatedBodyParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this create org repo created body parent
func (o *CreateOrgRepoCreatedBodyParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgRepoCreatedBodyParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParent) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyParentOwner User represents a user
swagger:model CreateOrgRepoCreatedBodyParentOwner
*/
type CreateOrgRepoCreatedBodyParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this create org repo created body parent owner
func (o *CreateOrgRepoCreatedBodyParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgRepoCreatedBodyParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentOwner) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyParentParent Repository represents a repository
swagger:model CreateOrgRepoCreatedBodyParentParent
*/
type CreateOrgRepoCreatedBodyParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *CreateOrgRepoCreatedBodyParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *CreateOrgRepoCreatedBodyParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this create org repo created body parent parent
func (o *CreateOrgRepoCreatedBodyParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgRepoCreatedBodyParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *CreateOrgRepoCreatedBodyParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgRepoCreated" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentParent) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyParentParentOwner User represents a user
swagger:model CreateOrgRepoCreatedBodyParentParentOwner
*/
type CreateOrgRepoCreatedBodyParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this create org repo created body parent parent owner
func (o *CreateOrgRepoCreatedBodyParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgRepoCreatedBodyParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("createOrgRepoCreated"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentParentOwner) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyParentParentPermissions Permission represents a set of permissions
swagger:model CreateOrgRepoCreatedBodyParentParentPermissions
*/
type CreateOrgRepoCreatedBodyParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this create org repo created body parent parent permissions
func (o *CreateOrgRepoCreatedBodyParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyParentPermissions Permission represents a set of permissions
swagger:model CreateOrgRepoCreatedBodyParentPermissions
*/
type CreateOrgRepoCreatedBodyParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this create org repo created body parent permissions
func (o *CreateOrgRepoCreatedBodyParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyParentPermissions) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateOrgRepoCreatedBodyPermissions Permission represents a set of permissions
swagger:model CreateOrgRepoCreatedBodyPermissions
*/
type CreateOrgRepoCreatedBodyPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this create org repo created body permissions
func (o *CreateOrgRepoCreatedBodyPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgRepoCreatedBodyPermissions) UnmarshalBinary(b []byte) error {
	var res CreateOrgRepoCreatedBodyPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
