// Code generated by go-swagger; DO NOT EDIT.

package organization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// OrgGetReader is a Reader for the OrgGet structure.
type OrgGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrgGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewOrgGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOrgGetOK creates a OrgGetOK with default headers values
func NewOrgGetOK() *OrgGetOK {
	return &OrgGetOK{}
}

/*OrgGetOK handles this case with default header values.

Organization
*/
type OrgGetOK struct {
	Payload OrgGetOKBody
}

func (o *OrgGetOK) Error() string {
	return fmt.Sprintf("[GET /orgs/{org}][%d] orgGetOK  %+v", 200, o.Payload)
}

func (o *OrgGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*OrgGetOKBody Organization represents an organization
swagger:model OrgGetOKBody
*/
type OrgGetOKBody struct {

	// avatar URL
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// description
	// Required: true
	Description *string `json:"description"`

	// full name
	// Required: true
	FullName *string `json:"full_name"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// location
	// Required: true
	Location *string `json:"location"`

	// user name
	// Required: true
	UserName *string `json:"username"`

	// website
	// Required: true
	Website *string `json:"website"`
}

// Validate validates this org get o k body
func (o *OrgGetOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebsite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OrgGetOKBody) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *OrgGetOKBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

func (o *OrgGetOKBody) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"full_name", "body", o.FullName); err != nil {
		return err
	}

	return nil
}

func (o *OrgGetOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *OrgGetOKBody) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

func (o *OrgGetOKBody) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"username", "body", o.UserName); err != nil {
		return err
	}

	return nil
}

func (o *OrgGetOKBody) validateWebsite(formats strfmt.Registry) error {

	if err := validate.Required("orgGetOK"+"."+"website", "body", o.Website); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OrgGetOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OrgGetOKBody) UnmarshalBinary(b []byte) error {
	var res OrgGetOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
