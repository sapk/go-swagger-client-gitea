// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoEditPullRequestReader is a Reader for the RepoEditPullRequest structure.
type RepoEditPullRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoEditPullRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewRepoEditPullRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoEditPullRequestCreated creates a RepoEditPullRequestCreated with default headers values
func NewRepoEditPullRequestCreated() *RepoEditPullRequestCreated {
	return &RepoEditPullRequestCreated{}
}

/*RepoEditPullRequestCreated handles this case with default header values.

PullRequest
*/
type RepoEditPullRequestCreated struct {
	Payload RepoEditPullRequestCreatedBody
}

func (o *RepoEditPullRequestCreated) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/pulls/{index}][%d] repoEditPullRequestCreated  %+v", 201, o.Payload)
}

func (o *RepoEditPullRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssigneesItems0 User represents a user
swagger:model AssigneesItems0
*/
type AssigneesItems0 struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this assignees items0
func (o *AssigneesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssigneesItems0) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssigneesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssigneesItems0) UnmarshalBinary(b []byte) error {
	var res AssigneesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LabelsItems0 Label a label to an issue or a pr
swagger:model LabelsItems0
*/
type LabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`
}

// Validate validates this labels items0
func (o *LabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LabelsItems0) UnmarshalBinary(b []byte) error {
	var res LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestBody EditPullRequestOption options when modify pull request
swagger:model RepoEditPullRequestBody
*/
type RepoEditPullRequestBody struct {

	// assignee
	Assignee string `json:"assignee,omitempty"`

	// assignees
	Assignees []string `json:"assignees"`

	// body
	Body string `json:"body,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_date,omitempty"`

	// labels
	Labels []int64 `json:"labels"`

	// milestone
	Milestone int64 `json:"milestone,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestBody) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBody PullRequest represents a pull request
swagger:model RepoEditPullRequestCreatedBody
*/
type RepoEditPullRequestCreatedBody struct {

	// assignees
	// Required: true
	Assignees []*models.AssigneesItems0 `json:"assignees"`

	// body
	// Required: true
	Body *string `json:"body"`

	// closed
	// Required: true
	// Format: date-time
	Closed *strfmt.DateTime `json:"closed_at"`

	// comments
	// Required: true
	Comments *int64 `json:"comments"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// deadline
	// Required: true
	// Format: date-time
	Deadline *strfmt.DateTime `json:"due_date"`

	// diff URL
	// Required: true
	DiffURL *string `json:"diff_url"`

	// HTML URL
	// Required: true
	HTMLURL *string `json:"html_url"`

	// has merged
	// Required: true
	HasMerged *bool `json:"merged"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// index
	// Required: true
	Index *int64 `json:"number"`

	// labels
	// Required: true
	Labels []*models.LabelsItems0 `json:"labels"`

	// merge base
	// Required: true
	MergeBase *string `json:"merge_base"`

	// mergeable
	// Required: true
	Mergeable *bool `json:"mergeable"`

	// merged
	// Required: true
	// Format: date-time
	Merged *strfmt.DateTime `json:"merged_at"`

	// merged commit ID
	// Required: true
	MergedCommitID *string `json:"merge_commit_sha"`

	// patch URL
	// Required: true
	PatchURL *string `json:"patch_url"`

	// title
	// Required: true
	Title *string `json:"title"`

	// URL
	// Required: true
	URL *string `json:"url"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// assignee
	// Required: true
	Assignee *RepoEditPullRequestCreatedBodyAssignee `json:"assignee"`

	// base
	// Required: true
	Base *RepoEditPullRequestCreatedBodyBase `json:"base"`

	// head
	// Required: true
	Head *RepoEditPullRequestCreatedBodyHead `json:"head"`

	// merged by
	// Required: true
	MergedBy *RepoEditPullRequestCreatedBodyMergedBy `json:"merged_by"`

	// milestone
	// Required: true
	Milestone *RepoEditPullRequestCreatedBodyMilestone `json:"milestone"`

	// StateType issue state type
	// Required: true
	State *string `json:"state"`

	// user
	// Required: true
	User *RepoEditPullRequestCreatedBodyUser `json:"user"`
}

// Validate validates this repo edit pull request created body
func (o *RepoEditPullRequestCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDiffURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHasMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergeable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedCommitID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePatchURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateAssignees(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"assignees", "body", o.Assignees); err != nil {
		return err
	}

	for i := 0; i < len(o.Assignees); i++ {
		if swag.IsZero(o.Assignees[i]) { // not required
			continue
		}

		if o.Assignees[i] != nil {
			if err := o.Assignees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoEditPullRequestCreated" + "." + "assignees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"body", "body", o.Body); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateClosed(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"closed_at", "body", o.Closed); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"comments", "body", o.Comments); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateDeadline(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"due_date", "body", o.Deadline); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"due_date", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateDiffURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"diff_url", "body", o.DiffURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateHasMerged(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"merged", "body", o.HasMerged); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"number", "body", o.Index); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"labels", "body", o.Labels); err != nil {
		return err
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoEditPullRequestCreated" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateMergeBase(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"merge_base", "body", o.MergeBase); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateMergeable(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"mergeable", "body", o.Mergeable); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateMerged(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"merged_at", "body", o.Merged); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"merged_at", "body", "date-time", o.Merged.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateMergedCommitID(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"merge_commit_sha", "body", o.MergedCommitID); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validatePatchURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"patch_url", "body", o.PatchURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateAssignee(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"assignee", "body", o.Assignee); err != nil {
		return err
	}

	if o.Assignee != nil {
		if err := o.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "assignee")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateBase(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"base", "body", o.Base); err != nil {
		return err
	}

	if o.Base != nil {
		if err := o.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateHead(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"head", "body", o.Head); err != nil {
		return err
	}

	if o.Head != nil {
		if err := o.Head.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateMergedBy(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"merged_by", "body", o.MergedBy); err != nil {
		return err
	}

	if o.MergedBy != nil {
		if err := o.MergedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "merged_by")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateMilestone(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"milestone", "body", o.Milestone); err != nil {
		return err
	}

	if o.Milestone != nil {
		if err := o.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "milestone")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("repoEditPullRequestCreated"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBody) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyAssignee User represents a user
swagger:model RepoEditPullRequestCreatedBodyAssignee
*/
type RepoEditPullRequestCreatedBodyAssignee struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body assignee
func (o *RepoEditPullRequestCreatedBodyAssignee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyAssignee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"assignee"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyAssignee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyAssignee) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyAssignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBase PRBranchInfo information about a branch
swagger:model RepoEditPullRequestCreatedBodyBase
*/
type RepoEditPullRequestCreatedBodyBase struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoEditPullRequestCreatedBodyBaseRepo `json:"repo,omitempty"`
}

// Validate validates this repo edit pull request created body base
func (o *RepoEditPullRequestCreatedBodyBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBase) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBase) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBase) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepo Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyBaseRepo
*/
type RepoEditPullRequestCreatedBodyBaseRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyBaseRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoEditPullRequestCreatedBodyBaseRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyBaseRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body base repo
func (o *RepoEditPullRequestCreatedBodyBaseRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepo) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyBaseRepoOwner
*/
type RepoEditPullRequestCreatedBodyBaseRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body base repo owner
func (o *RepoEditPullRequestCreatedBodyBaseRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParent Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParent
*/
type RepoEditPullRequestCreatedBodyBaseRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyBaseRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoEditPullRequestCreatedBodyBaseRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyBaseRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent
func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentOwner
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent owner
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentParent Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentParent
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent parent
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent parent owner
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentParentParent Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentParentParent
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent parent parent
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent parent parent owner
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent parent parent permissions
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent parent permissions
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoParentPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyBaseRepoParentPermissions
*/
type RepoEditPullRequestCreatedBodyBaseRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body base repo parent permissions
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyBaseRepoPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyBaseRepoPermissions
*/
type RepoEditPullRequestCreatedBodyBaseRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body base repo permissions
func (o *RepoEditPullRequestCreatedBodyBaseRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyBaseRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyBaseRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHead PRBranchInfo information about a branch
swagger:model RepoEditPullRequestCreatedBodyHead
*/
type RepoEditPullRequestCreatedBodyHead struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoEditPullRequestCreatedBodyHeadRepo `json:"repo,omitempty"`
}

// Validate validates this repo edit pull request created body head
func (o *RepoEditPullRequestCreatedBodyHead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHead) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHead) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHead) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepo Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyHeadRepo
*/
type RepoEditPullRequestCreatedBodyHeadRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyHeadRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoEditPullRequestCreatedBodyHeadRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyHeadRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body head repo
func (o *RepoEditPullRequestCreatedBodyHeadRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepo) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyHeadRepoOwner
*/
type RepoEditPullRequestCreatedBodyHeadRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body head repo owner
func (o *RepoEditPullRequestCreatedBodyHeadRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParent Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParent
*/
type RepoEditPullRequestCreatedBodyHeadRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyHeadRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoEditPullRequestCreatedBodyHeadRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyHeadRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent
func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentOwner
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent owner
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentParent Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentParent
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent parent
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent parent owner
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentParentParent Repository represents a repository
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentParentParent
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent parent parent
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditPullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner User represents a user
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent parent parent owner
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent parent parent permissions
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent parent permissions
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoParentPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyHeadRepoParentPermissions
*/
type RepoEditPullRequestCreatedBodyHeadRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body head repo parent permissions
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyHeadRepoPermissions Permission represents a set of permissions
swagger:model RepoEditPullRequestCreatedBodyHeadRepoPermissions
*/
type RepoEditPullRequestCreatedBodyHeadRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo edit pull request created body head repo permissions
func (o *RepoEditPullRequestCreatedBodyHeadRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyHeadRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyHeadRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyMergedBy User represents a user
swagger:model RepoEditPullRequestCreatedBodyMergedBy
*/
type RepoEditPullRequestCreatedBodyMergedBy struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body merged by
func (o *RepoEditPullRequestCreatedBodyMergedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyMergedBy) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"merged_by"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyMergedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyMergedBy) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyMergedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyMilestone Milestone milestone is a collection of issues on one repository
swagger:model RepoEditPullRequestCreatedBodyMilestone
*/
type RepoEditPullRequestCreatedBodyMilestone struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this repo edit pull request created body milestone
func (o *RepoEditPullRequestCreatedBodyMilestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyMilestone) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"milestone"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditPullRequestCreatedBodyMilestone) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"milestone"+"."+"due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyMilestone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyMilestone) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyMilestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditPullRequestCreatedBodyUser User represents a user
swagger:model RepoEditPullRequestCreatedBodyUser
*/
type RepoEditPullRequestCreatedBodyUser struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit pull request created body user
func (o *RepoEditPullRequestCreatedBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditPullRequestCreatedBodyUser) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditPullRequestCreated"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditPullRequestCreatedBodyUser) UnmarshalBinary(b []byte) error {
	var res RepoEditPullRequestCreatedBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
