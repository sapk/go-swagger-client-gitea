// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoListPullRequestsReader is a Reader for the RepoListPullRequests structure.
type RepoListPullRequestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoListPullRequestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoListPullRequestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoListPullRequestsOK creates a RepoListPullRequestsOK with default headers values
func NewRepoListPullRequestsOK() *RepoListPullRequestsOK {
	return &RepoListPullRequestsOK{}
}

/*RepoListPullRequestsOK handles this case with default header values.

PullRequestList
*/
type RepoListPullRequestsOK struct {
	Payload []*models.RepoListPullRequestsOKBodyItems0
}

func (o *RepoListPullRequestsOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/pulls][%d] repoListPullRequestsOK  %+v", 200, o.Payload)
}

func (o *RepoListPullRequestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RepoListPullRequestsOKBodyItems0 PullRequest represents a pull request
swagger:model RepoListPullRequestsOKBodyItems0
*/
type RepoListPullRequestsOKBodyItems0 struct {

	// assignees
	Assignees []*models.RepoListPullRequestsOKBodyItems0AssigneesItems0 `json:"assignees"`

	// body
	Body string `json:"body,omitempty"`

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// comments
	Comments int64 `json:"comments,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_date,omitempty"`

	// diff URL
	DiffURL string `json:"diff_url,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// has merged
	HasMerged bool `json:"merged,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// index
	Index int64 `json:"number,omitempty"`

	// labels
	Labels []*models.RepoListPullRequestsOKBodyItems0LabelsItems0 `json:"labels"`

	// merge base
	MergeBase string `json:"merge_base,omitempty"`

	// mergeable
	Mergeable bool `json:"mergeable,omitempty"`

	// merged
	// Format: date-time
	Merged strfmt.DateTime `json:"merged_at,omitempty"`

	// merged commit ID
	MergedCommitID string `json:"merge_commit_sha,omitempty"`

	// patch URL
	PatchURL string `json:"patch_url,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// assignee
	Assignee *RepoListPullRequestsOKBodyItems0Assignee `json:"assignee,omitempty"`

	// base
	Base *RepoListPullRequestsOKBodyItems0Base `json:"base,omitempty"`

	// head
	Head *RepoListPullRequestsOKBodyItems0Head `json:"head,omitempty"`

	// merged by
	MergedBy *RepoListPullRequestsOKBodyItems0MergedBy `json:"merged_by,omitempty"`

	// milestone
	Milestone *RepoListPullRequestsOKBodyItems0Milestone `json:"milestone,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`

	// user
	User *RepoListPullRequestsOKBodyItems0User `json:"user,omitempty"`
}

// Validate validates this repo list pull requests o k body items0
func (o *RepoListPullRequestsOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateAssignees(formats strfmt.Registry) error {

	if swag.IsZero(o.Assignees) { // not required
		return nil
	}

	for i := 0; i < len(o.Assignees); i++ {
		if swag.IsZero(o.Assignees[i]) { // not required
			continue
		}

		if o.Assignees[i] != nil {
			if err := o.Assignees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("due_date", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateMerged(formats strfmt.Registry) error {

	if swag.IsZero(o.Merged) { // not required
		return nil
	}

	if err := validate.FormatOf("merged_at", "body", "date-time", o.Merged.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(o.Assignee) { // not required
		return nil
	}

	if o.Assignee != nil {
		if err := o.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateBase(formats strfmt.Registry) error {

	if swag.IsZero(o.Base) { // not required
		return nil
	}

	if o.Base != nil {
		if err := o.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateHead(formats strfmt.Registry) error {

	if swag.IsZero(o.Head) { // not required
		return nil
	}

	if o.Head != nil {
		if err := o.Head.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateMergedBy(formats strfmt.Registry) error {

	if swag.IsZero(o.MergedBy) { // not required
		return nil
	}

	if o.MergedBy != nil {
		if err := o.MergedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("merged_by")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateMilestone(formats strfmt.Registry) error {

	if swag.IsZero(o.Milestone) { // not required
		return nil
	}

	if o.Milestone != nil {
		if err := o.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestone")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0Assignee User represents a user
swagger:model RepoListPullRequestsOKBodyItems0Assignee
*/
type RepoListPullRequestsOKBodyItems0Assignee struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 assignee
func (o *RepoListPullRequestsOKBodyItems0Assignee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0Assignee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("assignee"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Assignee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Assignee) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0Assignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0AssigneesItems0 User represents a user
swagger:model RepoListPullRequestsOKBodyItems0AssigneesItems0
*/
type RepoListPullRequestsOKBodyItems0AssigneesItems0 struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 assignees items0
func (o *RepoListPullRequestsOKBodyItems0AssigneesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0AssigneesItems0) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0AssigneesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0AssigneesItems0) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0AssigneesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0Base PRBranchInfo information about a branch
swagger:model RepoListPullRequestsOKBodyItems0Base
*/
type RepoListPullRequestsOKBodyItems0Base struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoListPullRequestsOKBodyItems0BaseRepo `json:"repo,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base
func (o *RepoListPullRequestsOKBodyItems0Base) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0Base) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Base) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Base) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0Base
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepo Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0BaseRepo
*/
type RepoListPullRequestsOKBodyItems0BaseRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0BaseRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoListPullRequestsOKBodyItems0BaseRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0BaseRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo
func (o *RepoListPullRequestsOKBodyItems0BaseRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepo) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoOwner
*/
type RepoListPullRequestsOKBodyItems0BaseRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo owner
func (o *RepoListPullRequestsOKBodyItems0BaseRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParent Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParent
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0BaseRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoListPullRequestsOKBodyItems0BaseRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentOwner
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent owner
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentParent Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentParent
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent parent
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent parent owner
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent parent parent
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent parent parent owner
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent parent parent permissions
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent parent permissions
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions
*/
type RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo parent permissions
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0BaseRepoPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0BaseRepoPermissions
*/
type RepoListPullRequestsOKBodyItems0BaseRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 base repo permissions
func (o *RepoListPullRequestsOKBodyItems0BaseRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0BaseRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0BaseRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0Head PRBranchInfo information about a branch
swagger:model RepoListPullRequestsOKBodyItems0Head
*/
type RepoListPullRequestsOKBodyItems0Head struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoListPullRequestsOKBodyItems0HeadRepo `json:"repo,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head
func (o *RepoListPullRequestsOKBodyItems0Head) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0Head) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Head) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Head) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0Head
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepo Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0HeadRepo
*/
type RepoListPullRequestsOKBodyItems0HeadRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0HeadRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoListPullRequestsOKBodyItems0HeadRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0HeadRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo
func (o *RepoListPullRequestsOKBodyItems0HeadRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepo) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoOwner
*/
type RepoListPullRequestsOKBodyItems0HeadRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo owner
func (o *RepoListPullRequestsOKBodyItems0HeadRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParent Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParent
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0HeadRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoListPullRequestsOKBodyItems0HeadRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentOwner
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent owner
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentParent Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentParent
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent parent
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent parent owner
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent Repository represents a repository
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent parent parent
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner User represents a user
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent parent parent owner
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent parent parent permissions
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent parent permissions
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions
*/
type RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo parent permissions
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0HeadRepoPermissions Permission represents a set of permissions
swagger:model RepoListPullRequestsOKBodyItems0HeadRepoPermissions
*/
type RepoListPullRequestsOKBodyItems0HeadRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 head repo permissions
func (o *RepoListPullRequestsOKBodyItems0HeadRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0HeadRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0HeadRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0LabelsItems0 Label a label to an issue or a pr
swagger:model RepoListPullRequestsOKBodyItems0LabelsItems0
*/
type RepoListPullRequestsOKBodyItems0LabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 labels items0
func (o *RepoListPullRequestsOKBodyItems0LabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0LabelsItems0) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0MergedBy User represents a user
swagger:model RepoListPullRequestsOKBodyItems0MergedBy
*/
type RepoListPullRequestsOKBodyItems0MergedBy struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 merged by
func (o *RepoListPullRequestsOKBodyItems0MergedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0MergedBy) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("merged_by"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0MergedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0MergedBy) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0MergedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0Milestone Milestone milestone is a collection of issues on one repository
swagger:model RepoListPullRequestsOKBodyItems0Milestone
*/
type RepoListPullRequestsOKBodyItems0Milestone struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 milestone
func (o *RepoListPullRequestsOKBodyItems0Milestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0Milestone) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("milestone"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListPullRequestsOKBodyItems0Milestone) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("milestone"+"."+"due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Milestone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0Milestone) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0Milestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListPullRequestsOKBodyItems0User User represents a user
swagger:model RepoListPullRequestsOKBodyItems0User
*/
type RepoListPullRequestsOKBodyItems0User struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list pull requests o k body items0 user
func (o *RepoListPullRequestsOKBodyItems0User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListPullRequestsOKBodyItems0User) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0User) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListPullRequestsOKBodyItems0User) UnmarshalBinary(b []byte) error {
	var res RepoListPullRequestsOKBodyItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
