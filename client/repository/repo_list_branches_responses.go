// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoListBranchesReader is a Reader for the RepoListBranches structure.
type RepoListBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoListBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoListBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoListBranchesOK creates a RepoListBranchesOK with default headers values
func NewRepoListBranchesOK() *RepoListBranchesOK {
	return &RepoListBranchesOK{}
}

/*RepoListBranchesOK handles this case with default header values.

BranchList
*/
type RepoListBranchesOK struct {
	Payload []*models.RepoListBranchesOKBodyItems0
}

func (o *RepoListBranchesOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/branches][%d] repoListBranchesOK  %+v", 200, o.Payload)
}

func (o *RepoListBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RepoListBranchesOKBodyItems0 Branch represents a repository branch
swagger:model RepoListBranchesOKBodyItems0
*/
type RepoListBranchesOKBodyItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// commit
	Commit *RepoListBranchesOKBodyItems0Commit `json:"commit,omitempty"`
}

// Validate validates this repo list branches o k body items0
func (o *RepoListBranchesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListBranchesOKBodyItems0) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(o.Commit) { // not required
		return nil
	}

	if o.Commit != nil {
		if err := o.Commit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res RepoListBranchesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListBranchesOKBodyItems0Commit PayloadCommit represents a commit
swagger:model RepoListBranchesOKBodyItems0Commit
*/
type RepoListBranchesOKBodyItems0Commit struct {

	// sha1 hash of the commit
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// author
	Author *RepoListBranchesOKBodyItems0CommitAuthor `json:"author,omitempty"`

	// committer
	Committer *RepoListBranchesOKBodyItems0CommitCommitter `json:"committer,omitempty"`

	// verification
	Verification *RepoListBranchesOKBodyItems0CommitVerification `json:"verification,omitempty"`
}

// Validate validates this repo list branches o k body items0 commit
func (o *RepoListBranchesOKBodyItems0Commit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCommitter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListBranchesOKBodyItems0Commit) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("commit"+"."+"timestamp", "body", "date-time", o.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListBranchesOKBodyItems0Commit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(o.Author) { // not required
		return nil
	}

	if o.Author != nil {
		if err := o.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit" + "." + "author")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListBranchesOKBodyItems0Commit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(o.Committer) { // not required
		return nil
	}

	if o.Committer != nil {
		if err := o.Committer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit" + "." + "committer")
			}
			return err
		}
	}

	return nil
}

func (o *RepoListBranchesOKBodyItems0Commit) validateVerification(formats strfmt.Registry) error {

	if swag.IsZero(o.Verification) { // not required
		return nil
	}

	if o.Verification != nil {
		if err := o.Verification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit" + "." + "verification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0Commit) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0Commit) UnmarshalBinary(b []byte) error {
	var res RepoListBranchesOKBodyItems0Commit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListBranchesOKBodyItems0CommitAuthor PayloadUser represents the author or committer of a commit
swagger:model RepoListBranchesOKBodyItems0CommitAuthor
*/
type RepoListBranchesOKBodyItems0CommitAuthor struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// Full name of the commit author
	Name string `json:"name,omitempty"`

	// user name
	UserName string `json:"username,omitempty"`
}

// Validate validates this repo list branches o k body items0 commit author
func (o *RepoListBranchesOKBodyItems0CommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListBranchesOKBodyItems0CommitAuthor) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("commit"+"."+"author"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0CommitAuthor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0CommitAuthor) UnmarshalBinary(b []byte) error {
	var res RepoListBranchesOKBodyItems0CommitAuthor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListBranchesOKBodyItems0CommitCommitter PayloadUser represents the author or committer of a commit
swagger:model RepoListBranchesOKBodyItems0CommitCommitter
*/
type RepoListBranchesOKBodyItems0CommitCommitter struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// Full name of the commit author
	Name string `json:"name,omitempty"`

	// user name
	UserName string `json:"username,omitempty"`
}

// Validate validates this repo list branches o k body items0 commit committer
func (o *RepoListBranchesOKBodyItems0CommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListBranchesOKBodyItems0CommitCommitter) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("commit"+"."+"committer"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0CommitCommitter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0CommitCommitter) UnmarshalBinary(b []byte) error {
	var res RepoListBranchesOKBodyItems0CommitCommitter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListBranchesOKBodyItems0CommitVerification PayloadCommitVerification represents the GPG verification of a commit
swagger:model RepoListBranchesOKBodyItems0CommitVerification
*/
type RepoListBranchesOKBodyItems0CommitVerification struct {

	// payload
	Payload string `json:"payload,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// signature
	Signature string `json:"signature,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this repo list branches o k body items0 commit verification
func (o *RepoListBranchesOKBodyItems0CommitVerification) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0CommitVerification) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListBranchesOKBodyItems0CommitVerification) UnmarshalBinary(b []byte) error {
	var res RepoListBranchesOKBodyItems0CommitVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
