// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoGetByIDReader is a Reader for the RepoGetByID structure.
type RepoGetByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoGetByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoGetByIDOK creates a RepoGetByIDOK with default headers values
func NewRepoGetByIDOK() *RepoGetByIDOK {
	return &RepoGetByIDOK{}
}

/*RepoGetByIDOK handles this case with default header values.

Repository
*/
type RepoGetByIDOK struct {
	Payload RepoGetByIDOKBody
}

func (o *RepoGetByIDOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{id}][%d] repoGetByIdOK  %+v", 200, o.Payload)
}

func (o *RepoGetByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RepoGetByIDOKBody Repository represents a repository
swagger:model RepoGetByIDOKBody
*/
type RepoGetByIDOKBody struct {

	// clone URL
	// Required: true
	CloneURL *string `json:"clone_url"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// default branch
	// Required: true
	DefaultBranch *string `json:"default_branch"`

	// description
	// Required: true
	Description *string `json:"description"`

	// empty
	// Required: true
	Empty *bool `json:"empty"`

	// fork
	// Required: true
	Fork *bool `json:"fork"`

	// forks
	// Required: true
	Forks *int64 `json:"forks_count"`

	// full name
	// Required: true
	FullName *string `json:"full_name"`

	// HTML URL
	// Required: true
	HTMLURL *string `json:"html_url"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// mirror
	// Required: true
	Mirror *bool `json:"mirror"`

	// name
	// Required: true
	Name *string `json:"name"`

	// open issues
	// Required: true
	OpenIssues *int64 `json:"open_issues_count"`

	// private
	// Required: true
	Private *bool `json:"private"`

	// SSH URL
	// Required: true
	SSHURL *string `json:"ssh_url"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// stars
	// Required: true
	Stars *int64 `json:"stars_count"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// watchers
	// Required: true
	Watchers *int64 `json:"watchers_count"`

	// website
	// Required: true
	Website *string `json:"website"`

	// owner
	// Required: true
	Owner *RepoGetByIDOKBodyOwner `json:"owner"`

	// parent
	// Required: true
	Parent *RepoGetByIDOKBodyParent `json:"parent"`

	// permissions
	// Required: true
	Permissions *RepoGetByIDOKBodyPermissions `json:"permissions"`
}

// Validate validates this repo get by ID o k body
func (o *RepoGetByIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCloneURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDefaultBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmpty(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFork(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateForks(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMirror(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOpenIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrivate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSSHURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStars(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWatchers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWebsite(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetByIDOKBody) validateCloneURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"clone_url", "body", o.CloneURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateDefaultBranch(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"default_branch", "body", o.DefaultBranch); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateEmpty(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"empty", "body", o.Empty); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateFork(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"fork", "body", o.Fork); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateForks(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"forks_count", "body", o.Forks); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"full_name", "body", o.FullName); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateMirror(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"mirror", "body", o.Mirror); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateOpenIssues(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"open_issues_count", "body", o.OpenIssues); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validatePrivate(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"private", "body", o.Private); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateSSHURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"ssh_url", "body", o.SSHURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"size", "body", o.Size); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateStars(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"stars_count", "body", o.Stars); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateWatchers(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"watchers_count", "body", o.Watchers); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateWebsite(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"website", "body", o.Website); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"owner", "body", o.Owner); err != nil {
		return err
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetByIDOKBody) validateParent(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"parent", "body", o.Parent); err != nil {
		return err
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetByIDOKBody) validatePermissions(formats strfmt.Registry) error {

	if err := validate.Required("repoGetByIdOK"+"."+"permissions", "body", o.Permissions); err != nil {
		return err
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBody) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyOwner User represents a user
swagger:model RepoGetByIDOKBodyOwner
*/
type RepoGetByIDOKBodyOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get by ID o k body owner
func (o *RepoGetByIDOKBodyOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetByIDOKBodyOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyParent Repository represents a repository
swagger:model RepoGetByIDOKBodyParent
*/
type RepoGetByIDOKBodyParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetByIDOKBodyParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetByIDOKBodyParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetByIDOKBodyParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get by ID o k body parent
func (o *RepoGetByIDOKBodyParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetByIDOKBodyParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBodyParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBodyParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetByIDOKBodyParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetByIDOKBodyParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParent) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyParentOwner User represents a user
swagger:model RepoGetByIDOKBodyParentOwner
*/
type RepoGetByIDOKBodyParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get by ID o k body parent owner
func (o *RepoGetByIDOKBodyParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetByIDOKBodyParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyParentParent Repository represents a repository
swagger:model RepoGetByIDOKBodyParentParent
*/
type RepoGetByIDOKBodyParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetByIDOKBodyParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetByIDOKBodyParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get by ID o k body parent parent
func (o *RepoGetByIDOKBodyParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetByIDOKBodyParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBodyParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetByIDOKBodyParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetByIDOKBodyParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetByIDOKBodyParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetByIdOK" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentParent) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyParentParentOwner User represents a user
swagger:model RepoGetByIDOKBodyParentParentOwner
*/
type RepoGetByIDOKBodyParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get by ID o k body parent parent owner
func (o *RepoGetByIDOKBodyParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetByIDOKBodyParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetByIdOK"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyParentParentPermissions Permission represents a set of permissions
swagger:model RepoGetByIDOKBodyParentParentPermissions
*/
type RepoGetByIDOKBodyParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get by ID o k body parent parent permissions
func (o *RepoGetByIDOKBodyParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyParentPermissions Permission represents a set of permissions
swagger:model RepoGetByIDOKBodyParentPermissions
*/
type RepoGetByIDOKBodyParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get by ID o k body parent permissions
func (o *RepoGetByIDOKBodyParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetByIDOKBodyPermissions Permission represents a set of permissions
swagger:model RepoGetByIDOKBodyPermissions
*/
type RepoGetByIDOKBodyPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get by ID o k body permissions
func (o *RepoGetByIDOKBodyPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetByIDOKBodyPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetByIDOKBodyPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetByIDOKBodyPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
