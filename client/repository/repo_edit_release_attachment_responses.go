// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// RepoEditReleaseAttachmentReader is a Reader for the RepoEditReleaseAttachment structure.
type RepoEditReleaseAttachmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoEditReleaseAttachmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewRepoEditReleaseAttachmentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoEditReleaseAttachmentCreated creates a RepoEditReleaseAttachmentCreated with default headers values
func NewRepoEditReleaseAttachmentCreated() *RepoEditReleaseAttachmentCreated {
	return &RepoEditReleaseAttachmentCreated{}
}

/*RepoEditReleaseAttachmentCreated handles this case with default header values.

Attachment
*/
type RepoEditReleaseAttachmentCreated struct {
	Payload RepoEditReleaseAttachmentCreatedBody
}

func (o *RepoEditReleaseAttachmentCreated) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}][%d] repoEditReleaseAttachmentCreated  %+v", 201, o.Payload)
}

func (o *RepoEditReleaseAttachmentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RepoEditReleaseAttachmentBody EditAttachmentOptions options for editing attachments
swagger:model RepoEditReleaseAttachmentBody
*/
type RepoEditReleaseAttachmentBody struct {

	// name
	Name string `json:"name,omitempty"`
}

// MarshalBinary interface implementation
func (o *RepoEditReleaseAttachmentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditReleaseAttachmentBody) UnmarshalBinary(b []byte) error {
	var res RepoEditReleaseAttachmentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditReleaseAttachmentCreatedBody Attachment a generic attachment
swagger:model RepoEditReleaseAttachmentCreatedBody
*/
type RepoEditReleaseAttachmentCreatedBody struct {

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// download count
	// Required: true
	DownloadCount *int64 `json:"download_count"`

	// download URL
	// Required: true
	DownloadURL *string `json:"browser_download_url"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// size
	// Required: true
	Size *int64 `json:"size"`

	// UUID
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this repo edit release attachment created body
func (o *RepoEditReleaseAttachmentCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDownloadCount(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDownloadURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditReleaseAttachmentCreated"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateDownloadCount(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"download_count", "body", o.DownloadCount); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateDownloadURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"browser_download_url", "body", o.DownloadURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"size", "body", o.Size); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseAttachmentCreatedBody) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseAttachmentCreated"+"."+"uuid", "body", o.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditReleaseAttachmentCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditReleaseAttachmentCreatedBody) UnmarshalBinary(b []byte) error {
	var res RepoEditReleaseAttachmentCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
