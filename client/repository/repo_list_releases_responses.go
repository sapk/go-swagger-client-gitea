// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoListReleasesReader is a Reader for the RepoListReleases structure.
type RepoListReleasesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoListReleasesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoListReleasesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoListReleasesOK creates a RepoListReleasesOK with default headers values
func NewRepoListReleasesOK() *RepoListReleasesOK {
	return &RepoListReleasesOK{}
}

/*RepoListReleasesOK handles this case with default header values.

ReleaseList
*/
type RepoListReleasesOK struct {
	Payload []*models.RepoListReleasesOKBodyItems0
}

func (o *RepoListReleasesOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/releases][%d] repoListReleasesOK  %+v", 200, o.Payload)
}

func (o *RepoListReleasesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RepoListReleasesOKBodyItems0 Release represents a repository release
swagger:model RepoListReleasesOKBodyItems0
*/
type RepoListReleasesOKBodyItems0 struct {

	// attachments
	Attachments []*models.RepoListReleasesOKBodyItems0AssetsItems0 `json:"assets"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// is draft
	IsDraft bool `json:"draft,omitempty"`

	// is prerelease
	IsPrerelease bool `json:"prerelease,omitempty"`

	// note
	Note string `json:"body,omitempty"`

	// published at
	// Format: date-time
	PublishedAt strfmt.DateTime `json:"published_at,omitempty"`

	// tag name
	TagName string `json:"tag_name,omitempty"`

	// tar URL
	TarURL string `json:"tarball_url,omitempty"`

	// target
	Target string `json:"target_commitish,omitempty"`

	// title
	Title string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// zip URL
	ZipURL string `json:"zipball_url,omitempty"`

	// author
	Author *RepoListReleasesOKBodyItems0Author `json:"author,omitempty"`
}

// Validate validates this repo list releases o k body items0
func (o *RepoListReleasesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListReleasesOKBodyItems0) validateAttachments(formats strfmt.Registry) error {

	if swag.IsZero(o.Attachments) { // not required
		return nil
	}

	for i := 0; i < len(o.Attachments); i++ {
		if swag.IsZero(o.Attachments[i]) { // not required
			continue
		}

		if o.Attachments[i] != nil {
			if err := o.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoListReleasesOKBodyItems0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListReleasesOKBodyItems0) validatePublishedAt(formats strfmt.Registry) error {

	if swag.IsZero(o.PublishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("published_at", "body", "date-time", o.PublishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListReleasesOKBodyItems0) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(o.Author) { // not required
		return nil
	}

	if o.Author != nil {
		if err := o.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("author")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListReleasesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListReleasesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res RepoListReleasesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListReleasesOKBodyItems0AssetsItems0 Attachment a generic attachment
swagger:model RepoListReleasesOKBodyItems0AssetsItems0
*/
type RepoListReleasesOKBodyItems0AssetsItems0 struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// download count
	DownloadCount int64 `json:"download_count,omitempty"`

	// download URL
	DownloadURL string `json:"browser_download_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// UUID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this repo list releases o k body items0 assets items0
func (o *RepoListReleasesOKBodyItems0AssetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListReleasesOKBodyItems0AssetsItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListReleasesOKBodyItems0AssetsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListReleasesOKBodyItems0AssetsItems0) UnmarshalBinary(b []byte) error {
	var res RepoListReleasesOKBodyItems0AssetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListReleasesOKBodyItems0Author User represents a user
swagger:model RepoListReleasesOKBodyItems0Author
*/
type RepoListReleasesOKBodyItems0Author struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list releases o k body items0 author
func (o *RepoListReleasesOKBodyItems0Author) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListReleasesOKBodyItems0Author) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("author"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListReleasesOKBodyItems0Author) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListReleasesOKBodyItems0Author) UnmarshalBinary(b []byte) error {
	var res RepoListReleasesOKBodyItems0Author
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
