// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRepoSearchParams creates a new RepoSearchParams object
// with the default values initialized.
func NewRepoSearchParams() *RepoSearchParams {
	var ()
	return &RepoSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRepoSearchParamsWithTimeout creates a new RepoSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRepoSearchParamsWithTimeout(timeout time.Duration) *RepoSearchParams {
	var ()
	return &RepoSearchParams{

		timeout: timeout,
	}
}

// NewRepoSearchParamsWithContext creates a new RepoSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewRepoSearchParamsWithContext(ctx context.Context) *RepoSearchParams {
	var ()
	return &RepoSearchParams{

		Context: ctx,
	}
}

// NewRepoSearchParamsWithHTTPClient creates a new RepoSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRepoSearchParamsWithHTTPClient(client *http.Client) *RepoSearchParams {
	var ()
	return &RepoSearchParams{
		HTTPClient: client,
	}
}

/*RepoSearchParams contains all the parameters to send to the API endpoint
for the repo search operation typically these are written to a http.Request
*/
type RepoSearchParams struct {

	/*Exclusive
	  if `uid` is given, search only for repos that the user owns

	*/
	Exclusive *bool
	/*Limit
	  page size of results, maximum page size is 50

	*/
	Limit *int64
	/*Mode
	  type of repository to search for. Supported values are "fork", "source", "mirror" and "collaborative"

	*/
	Mode *string
	/*Page
	  page number of results to return (1-based)

	*/
	Page *int64
	/*Q
	  keyword

	*/
	Q *string
	/*UID
	  search only for repos that the user with the given id owns or contributes to

	*/
	UID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the repo search params
func (o *RepoSearchParams) WithTimeout(timeout time.Duration) *RepoSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the repo search params
func (o *RepoSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the repo search params
func (o *RepoSearchParams) WithContext(ctx context.Context) *RepoSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the repo search params
func (o *RepoSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the repo search params
func (o *RepoSearchParams) WithHTTPClient(client *http.Client) *RepoSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the repo search params
func (o *RepoSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExclusive adds the exclusive to the repo search params
func (o *RepoSearchParams) WithExclusive(exclusive *bool) *RepoSearchParams {
	o.SetExclusive(exclusive)
	return o
}

// SetExclusive adds the exclusive to the repo search params
func (o *RepoSearchParams) SetExclusive(exclusive *bool) {
	o.Exclusive = exclusive
}

// WithLimit adds the limit to the repo search params
func (o *RepoSearchParams) WithLimit(limit *int64) *RepoSearchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the repo search params
func (o *RepoSearchParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMode adds the mode to the repo search params
func (o *RepoSearchParams) WithMode(mode *string) *RepoSearchParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the repo search params
func (o *RepoSearchParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithPage adds the page to the repo search params
func (o *RepoSearchParams) WithPage(page *int64) *RepoSearchParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the repo search params
func (o *RepoSearchParams) SetPage(page *int64) {
	o.Page = page
}

// WithQ adds the q to the repo search params
func (o *RepoSearchParams) WithQ(q *string) *RepoSearchParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the repo search params
func (o *RepoSearchParams) SetQ(q *string) {
	o.Q = q
}

// WithUID adds the uid to the repo search params
func (o *RepoSearchParams) WithUID(uid *int64) *RepoSearchParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the repo search params
func (o *RepoSearchParams) SetUID(uid *int64) {
	o.UID = uid
}

// WriteToRequest writes these params to a swagger request
func (o *RepoSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Exclusive != nil {

		// query param exclusive
		var qrExclusive bool
		if o.Exclusive != nil {
			qrExclusive = *o.Exclusive
		}
		qExclusive := swag.FormatBool(qrExclusive)
		if qExclusive != "" {
			if err := r.SetQueryParam("exclusive", qExclusive); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Mode != nil {

		// query param mode
		var qrMode string
		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := qrMode
		if qMode != "" {
			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.UID != nil {

		// query param uid
		var qrUID int64
		if o.UID != nil {
			qrUID = *o.UID
		}
		qUID := swag.FormatInt64(qrUID)
		if qUID != "" {
			if err := r.SetQueryParam("uid", qUID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
