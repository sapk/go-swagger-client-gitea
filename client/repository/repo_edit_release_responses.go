// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoEditReleaseReader is a Reader for the RepoEditRelease structure.
type RepoEditReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoEditReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoEditReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoEditReleaseOK creates a RepoEditReleaseOK with default headers values
func NewRepoEditReleaseOK() *RepoEditReleaseOK {
	return &RepoEditReleaseOK{}
}

/*RepoEditReleaseOK handles this case with default header values.

Release
*/
type RepoEditReleaseOK struct {
	Payload RepoEditReleaseOKBody
}

func (o *RepoEditReleaseOK) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/releases/{id}][%d] repoEditReleaseOK  %+v", 200, o.Payload)
}

func (o *RepoEditReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssetsItems0 Attachment a generic attachment
swagger:model AssetsItems0
*/
type AssetsItems0 struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// download count
	DownloadCount int64 `json:"download_count,omitempty"`

	// download URL
	DownloadURL string `json:"browser_download_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// UUID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this assets items0
func (o *AssetsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssetsItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssetsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssetsItems0) UnmarshalBinary(b []byte) error {
	var res AssetsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditReleaseBody EditReleaseOption options when editing a release
swagger:model RepoEditReleaseBody
*/
type RepoEditReleaseBody struct {

	// is draft
	IsDraft bool `json:"draft,omitempty"`

	// is prerelease
	IsPrerelease bool `json:"prerelease,omitempty"`

	// note
	Note string `json:"body,omitempty"`

	// tag name
	TagName string `json:"tag_name,omitempty"`

	// target
	Target string `json:"target_commitish,omitempty"`

	// title
	Title string `json:"name,omitempty"`
}

// MarshalBinary interface implementation
func (o *RepoEditReleaseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditReleaseBody) UnmarshalBinary(b []byte) error {
	var res RepoEditReleaseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditReleaseOKBody Release represents a repository release
swagger:model RepoEditReleaseOKBody
*/
type RepoEditReleaseOKBody struct {

	// attachments
	// Required: true
	Attachments []*models.AssetsItems0 `json:"assets"`

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// is draft
	// Required: true
	IsDraft *bool `json:"draft"`

	// is prerelease
	// Required: true
	IsPrerelease *bool `json:"prerelease"`

	// note
	// Required: true
	Note *string `json:"body"`

	// published at
	// Required: true
	// Format: date-time
	PublishedAt *strfmt.DateTime `json:"published_at"`

	// tag name
	// Required: true
	TagName *string `json:"tag_name"`

	// tar URL
	// Required: true
	TarURL *string `json:"tarball_url"`

	// target
	// Required: true
	Target *string `json:"target_commitish"`

	// title
	// Required: true
	Title *string `json:"name"`

	// URL
	// Required: true
	URL *string `json:"url"`

	// zip URL
	// Required: true
	ZipURL *string `json:"zipball_url"`

	// author
	// Required: true
	Author *RepoEditReleaseOKBodyAuthor `json:"author"`
}

// Validate validates this repo edit release o k body
func (o *RepoEditReleaseOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAttachments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIsDraft(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIsPrerelease(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNote(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTagName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateZipURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditReleaseOKBody) validateAttachments(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"assets", "body", o.Attachments); err != nil {
		return err
	}

	for i := 0; i < len(o.Attachments); i++ {
		if swag.IsZero(o.Attachments[i]) { // not required
			continue
		}

		if o.Attachments[i] != nil {
			if err := o.Attachments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoEditReleaseOK" + "." + "assets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditReleaseOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateIsDraft(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"draft", "body", o.IsDraft); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateIsPrerelease(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"prerelease", "body", o.IsPrerelease); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateNote(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"body", "body", o.Note); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validatePublishedAt(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"published_at", "body", o.PublishedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("repoEditReleaseOK"+"."+"published_at", "body", "date-time", o.PublishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateTagName(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"tag_name", "body", o.TagName); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateTarURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"tarball_url", "body", o.TarURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"target_commitish", "body", o.Target); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"name", "body", o.Title); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateZipURL(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"zipball_url", "body", o.ZipURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoEditReleaseOKBody) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("repoEditReleaseOK"+"."+"author", "body", o.Author); err != nil {
		return err
	}

	if o.Author != nil {
		if err := o.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoEditReleaseOK" + "." + "author")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditReleaseOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditReleaseOKBody) UnmarshalBinary(b []byte) error {
	var res RepoEditReleaseOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoEditReleaseOKBodyAuthor User represents a user
swagger:model RepoEditReleaseOKBodyAuthor
*/
type RepoEditReleaseOKBodyAuthor struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo edit release o k body author
func (o *RepoEditReleaseOKBodyAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoEditReleaseOKBodyAuthor) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoEditReleaseOK"+"."+"author"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoEditReleaseOKBodyAuthor) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoEditReleaseOKBodyAuthor) UnmarshalBinary(b []byte) error {
	var res RepoEditReleaseOKBodyAuthor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
