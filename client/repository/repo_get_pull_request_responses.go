// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoGetPullRequestReader is a Reader for the RepoGetPullRequest structure.
type RepoGetPullRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoGetPullRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoGetPullRequestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoGetPullRequestOK creates a RepoGetPullRequestOK with default headers values
func NewRepoGetPullRequestOK() *RepoGetPullRequestOK {
	return &RepoGetPullRequestOK{}
}

/*RepoGetPullRequestOK handles this case with default header values.

PullRequest
*/
type RepoGetPullRequestOK struct {
	Payload RepoGetPullRequestOKBody
}

func (o *RepoGetPullRequestOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/pulls/{index}][%d] repoGetPullRequestOK  %+v", 200, o.Payload)
}

func (o *RepoGetPullRequestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssigneesItems0 User represents a user
swagger:model AssigneesItems0
*/
type AssigneesItems0 struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this assignees items0
func (o *AssigneesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssigneesItems0) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssigneesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssigneesItems0) UnmarshalBinary(b []byte) error {
	var res AssigneesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LabelsItems0 Label a label to an issue or a pr
swagger:model LabelsItems0
*/
type LabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`
}

// Validate validates this labels items0
func (o *LabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LabelsItems0) UnmarshalBinary(b []byte) error {
	var res LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBody PullRequest represents a pull request
swagger:model RepoGetPullRequestOKBody
*/
type RepoGetPullRequestOKBody struct {

	// assignees
	// Required: true
	Assignees []*models.AssigneesItems0 `json:"assignees"`

	// body
	// Required: true
	Body *string `json:"body"`

	// closed
	// Required: true
	// Format: date-time
	Closed *strfmt.DateTime `json:"closed_at"`

	// comments
	// Required: true
	Comments *int64 `json:"comments"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// deadline
	// Required: true
	// Format: date-time
	Deadline *strfmt.DateTime `json:"due_date"`

	// diff URL
	// Required: true
	DiffURL *string `json:"diff_url"`

	// HTML URL
	// Required: true
	HTMLURL *string `json:"html_url"`

	// has merged
	// Required: true
	HasMerged *bool `json:"merged"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// index
	// Required: true
	Index *int64 `json:"number"`

	// labels
	// Required: true
	Labels []*models.LabelsItems0 `json:"labels"`

	// merge base
	// Required: true
	MergeBase *string `json:"merge_base"`

	// mergeable
	// Required: true
	Mergeable *bool `json:"mergeable"`

	// merged
	// Required: true
	// Format: date-time
	Merged *strfmt.DateTime `json:"merged_at"`

	// merged commit ID
	// Required: true
	MergedCommitID *string `json:"merge_commit_sha"`

	// patch URL
	// Required: true
	PatchURL *string `json:"patch_url"`

	// title
	// Required: true
	Title *string `json:"title"`

	// URL
	// Required: true
	URL *string `json:"url"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// assignee
	// Required: true
	Assignee *RepoGetPullRequestOKBodyAssignee `json:"assignee"`

	// base
	// Required: true
	Base *RepoGetPullRequestOKBodyBase `json:"base"`

	// head
	// Required: true
	Head *RepoGetPullRequestOKBodyHead `json:"head"`

	// merged by
	// Required: true
	MergedBy *RepoGetPullRequestOKBodyMergedBy `json:"merged_by"`

	// milestone
	// Required: true
	Milestone *RepoGetPullRequestOKBodyMilestone `json:"milestone"`

	// StateType issue state type
	// Required: true
	State *string `json:"state"`

	// user
	// Required: true
	User *RepoGetPullRequestOKBodyUser `json:"user"`
}

// Validate validates this repo get pull request o k body
func (o *RepoGetPullRequestOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDiffURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHasMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergeable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedCommitID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePatchURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBody) validateAssignees(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"assignees", "body", o.Assignees); err != nil {
		return err
	}

	for i := 0; i < len(o.Assignees); i++ {
		if swag.IsZero(o.Assignees[i]) { // not required
			continue
		}

		if o.Assignees[i] != nil {
			if err := o.Assignees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoGetPullRequestOK" + "." + "assignees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"body", "body", o.Body); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateClosed(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"closed_at", "body", o.Closed); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"comments", "body", o.Comments); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateDeadline(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"due_date", "body", o.Deadline); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"due_date", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateDiffURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"diff_url", "body", o.DiffURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateHasMerged(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"merged", "body", o.HasMerged); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"number", "body", o.Index); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"labels", "body", o.Labels); err != nil {
		return err
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoGetPullRequestOK" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateMergeBase(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"merge_base", "body", o.MergeBase); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateMergeable(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"mergeable", "body", o.Mergeable); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateMerged(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"merged_at", "body", o.Merged); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"merged_at", "body", "date-time", o.Merged.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateMergedCommitID(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"merge_commit_sha", "body", o.MergedCommitID); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validatePatchURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"patch_url", "body", o.PatchURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateAssignee(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"assignee", "body", o.Assignee); err != nil {
		return err
	}

	if o.Assignee != nil {
		if err := o.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "assignee")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateBase(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"base", "body", o.Base); err != nil {
		return err
	}

	if o.Base != nil {
		if err := o.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateHead(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"head", "body", o.Head); err != nil {
		return err
	}

	if o.Head != nil {
		if err := o.Head.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateMergedBy(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"merged_by", "body", o.MergedBy); err != nil {
		return err
	}

	if o.MergedBy != nil {
		if err := o.MergedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "merged_by")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateMilestone(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"milestone", "body", o.Milestone); err != nil {
		return err
	}

	if o.Milestone != nil {
		if err := o.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "milestone")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("repoGetPullRequestOK"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBody) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyAssignee User represents a user
swagger:model RepoGetPullRequestOKBodyAssignee
*/
type RepoGetPullRequestOKBodyAssignee struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body assignee
func (o *RepoGetPullRequestOKBodyAssignee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyAssignee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"assignee"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyAssignee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyAssignee) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyAssignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBase PRBranchInfo information about a branch
swagger:model RepoGetPullRequestOKBodyBase
*/
type RepoGetPullRequestOKBodyBase struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoGetPullRequestOKBodyBaseRepo `json:"repo,omitempty"`
}

// Validate validates this repo get pull request o k body base
func (o *RepoGetPullRequestOKBodyBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBase) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBase) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBase) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepo Repository represents a repository
swagger:model RepoGetPullRequestOKBodyBaseRepo
*/
type RepoGetPullRequestOKBodyBaseRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyBaseRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetPullRequestOKBodyBaseRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyBaseRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body base repo
func (o *RepoGetPullRequestOKBodyBaseRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepo) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoOwner User represents a user
swagger:model RepoGetPullRequestOKBodyBaseRepoOwner
*/
type RepoGetPullRequestOKBodyBaseRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body base repo owner
func (o *RepoGetPullRequestOKBodyBaseRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParent Repository represents a repository
swagger:model RepoGetPullRequestOKBodyBaseRepoParent
*/
type RepoGetPullRequestOKBodyBaseRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyBaseRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetPullRequestOKBodyBaseRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyBaseRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent
func (o *RepoGetPullRequestOKBodyBaseRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentOwner User represents a user
swagger:model RepoGetPullRequestOKBodyBaseRepoParentOwner
*/
type RepoGetPullRequestOKBodyBaseRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent owner
func (o *RepoGetPullRequestOKBodyBaseRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentParent Repository represents a repository
swagger:model RepoGetPullRequestOKBodyBaseRepoParentParent
*/
type RepoGetPullRequestOKBodyBaseRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyBaseRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetPullRequestOKBodyBaseRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyBaseRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent parent
func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentParentOwner User represents a user
swagger:model RepoGetPullRequestOKBodyBaseRepoParentParentOwner
*/
type RepoGetPullRequestOKBodyBaseRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent parent owner
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentParentParent Repository represents a repository
swagger:model RepoGetPullRequestOKBodyBaseRepoParentParentParent
*/
type RepoGetPullRequestOKBodyBaseRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent parent parent
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner User represents a user
swagger:model RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner
*/
type RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent parent parent owner
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions
*/
type RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent parent parent permissions
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyBaseRepoParentParentPermissions
*/
type RepoGetPullRequestOKBodyBaseRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent parent permissions
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoParentPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyBaseRepoParentPermissions
*/
type RepoGetPullRequestOKBodyBaseRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body base repo parent permissions
func (o *RepoGetPullRequestOKBodyBaseRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyBaseRepoPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyBaseRepoPermissions
*/
type RepoGetPullRequestOKBodyBaseRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body base repo permissions
func (o *RepoGetPullRequestOKBodyBaseRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyBaseRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyBaseRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHead PRBranchInfo information about a branch
swagger:model RepoGetPullRequestOKBodyHead
*/
type RepoGetPullRequestOKBodyHead struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoGetPullRequestOKBodyHeadRepo `json:"repo,omitempty"`
}

// Validate validates this repo get pull request o k body head
func (o *RepoGetPullRequestOKBodyHead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHead) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHead) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHead) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepo Repository represents a repository
swagger:model RepoGetPullRequestOKBodyHeadRepo
*/
type RepoGetPullRequestOKBodyHeadRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyHeadRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetPullRequestOKBodyHeadRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyHeadRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body head repo
func (o *RepoGetPullRequestOKBodyHeadRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepo) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoOwner User represents a user
swagger:model RepoGetPullRequestOKBodyHeadRepoOwner
*/
type RepoGetPullRequestOKBodyHeadRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body head repo owner
func (o *RepoGetPullRequestOKBodyHeadRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParent Repository represents a repository
swagger:model RepoGetPullRequestOKBodyHeadRepoParent
*/
type RepoGetPullRequestOKBodyHeadRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyHeadRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetPullRequestOKBodyHeadRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyHeadRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent
func (o *RepoGetPullRequestOKBodyHeadRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentOwner User represents a user
swagger:model RepoGetPullRequestOKBodyHeadRepoParentOwner
*/
type RepoGetPullRequestOKBodyHeadRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent owner
func (o *RepoGetPullRequestOKBodyHeadRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentParent Repository represents a repository
swagger:model RepoGetPullRequestOKBodyHeadRepoParentParent
*/
type RepoGetPullRequestOKBodyHeadRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyHeadRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoGetPullRequestOKBodyHeadRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyHeadRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent parent
func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentParentOwner User represents a user
swagger:model RepoGetPullRequestOKBodyHeadRepoParentParentOwner
*/
type RepoGetPullRequestOKBodyHeadRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent parent owner
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentParentParent Repository represents a repository
swagger:model RepoGetPullRequestOKBodyHeadRepoParentParentParent
*/
type RepoGetPullRequestOKBodyHeadRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent parent parent
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoGetPullRequestOK" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner User represents a user
swagger:model RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner
*/
type RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent parent parent owner
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions
*/
type RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent parent parent permissions
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyHeadRepoParentParentPermissions
*/
type RepoGetPullRequestOKBodyHeadRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent parent permissions
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoParentPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyHeadRepoParentPermissions
*/
type RepoGetPullRequestOKBodyHeadRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body head repo parent permissions
func (o *RepoGetPullRequestOKBodyHeadRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyHeadRepoPermissions Permission represents a set of permissions
swagger:model RepoGetPullRequestOKBodyHeadRepoPermissions
*/
type RepoGetPullRequestOKBodyHeadRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo get pull request o k body head repo permissions
func (o *RepoGetPullRequestOKBodyHeadRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyHeadRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyHeadRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyMergedBy User represents a user
swagger:model RepoGetPullRequestOKBodyMergedBy
*/
type RepoGetPullRequestOKBodyMergedBy struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body merged by
func (o *RepoGetPullRequestOKBodyMergedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyMergedBy) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"merged_by"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyMergedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyMergedBy) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyMergedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyMilestone Milestone milestone is a collection of issues on one repository
swagger:model RepoGetPullRequestOKBodyMilestone
*/
type RepoGetPullRequestOKBodyMilestone struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this repo get pull request o k body milestone
func (o *RepoGetPullRequestOKBodyMilestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyMilestone) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"milestone"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoGetPullRequestOKBodyMilestone) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"milestone"+"."+"due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyMilestone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyMilestone) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyMilestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoGetPullRequestOKBodyUser User represents a user
swagger:model RepoGetPullRequestOKBodyUser
*/
type RepoGetPullRequestOKBodyUser struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo get pull request o k body user
func (o *RepoGetPullRequestOKBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoGetPullRequestOKBodyUser) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoGetPullRequestOK"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoGetPullRequestOKBodyUser) UnmarshalBinary(b []byte) error {
	var res RepoGetPullRequestOKBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
