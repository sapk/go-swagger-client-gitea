// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoCreatePullRequestReader is a Reader for the RepoCreatePullRequest structure.
type RepoCreatePullRequestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoCreatePullRequestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewRepoCreatePullRequestCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoCreatePullRequestCreated creates a RepoCreatePullRequestCreated with default headers values
func NewRepoCreatePullRequestCreated() *RepoCreatePullRequestCreated {
	return &RepoCreatePullRequestCreated{}
}

/*RepoCreatePullRequestCreated handles this case with default header values.

PullRequest
*/
type RepoCreatePullRequestCreated struct {
	Payload RepoCreatePullRequestCreatedBody
}

func (o *RepoCreatePullRequestCreated) Error() string {
	return fmt.Sprintf("[POST /repos/{owner}/{repo}/pulls][%d] repoCreatePullRequestCreated  %+v", 201, o.Payload)
}

func (o *RepoCreatePullRequestCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssigneesItems0 User represents a user
swagger:model AssigneesItems0
*/
type AssigneesItems0 struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this assignees items0
func (o *AssigneesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssigneesItems0) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssigneesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssigneesItems0) UnmarshalBinary(b []byte) error {
	var res AssigneesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LabelsItems0 Label a label to an issue or a pr
swagger:model LabelsItems0
*/
type LabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`
}

// Validate validates this labels items0
func (o *LabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LabelsItems0) UnmarshalBinary(b []byte) error {
	var res LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestBody CreatePullRequestOption options when creating a pull request
swagger:model RepoCreatePullRequestBody
*/
type RepoCreatePullRequestBody struct {

	// assignee
	Assignee string `json:"assignee,omitempty"`

	// assignees
	Assignees []string `json:"assignees"`

	// base
	Base string `json:"base,omitempty"`

	// body
	Body string `json:"body,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_date,omitempty"`

	// head
	Head string `json:"head,omitempty"`

	// labels
	Labels []int64 `json:"labels"`

	// milestone
	Milestone int64 `json:"milestone,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestBody) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBody PullRequest represents a pull request
swagger:model RepoCreatePullRequestCreatedBody
*/
type RepoCreatePullRequestCreatedBody struct {

	// assignees
	// Required: true
	Assignees []*models.AssigneesItems0 `json:"assignees"`

	// body
	// Required: true
	Body *string `json:"body"`

	// closed
	// Required: true
	// Format: date-time
	Closed *strfmt.DateTime `json:"closed_at"`

	// comments
	// Required: true
	Comments *int64 `json:"comments"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// deadline
	// Required: true
	// Format: date-time
	Deadline *strfmt.DateTime `json:"due_date"`

	// diff URL
	// Required: true
	DiffURL *string `json:"diff_url"`

	// HTML URL
	// Required: true
	HTMLURL *string `json:"html_url"`

	// has merged
	// Required: true
	HasMerged *bool `json:"merged"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// index
	// Required: true
	Index *int64 `json:"number"`

	// labels
	// Required: true
	Labels []*models.LabelsItems0 `json:"labels"`

	// merge base
	// Required: true
	MergeBase *string `json:"merge_base"`

	// mergeable
	// Required: true
	Mergeable *bool `json:"mergeable"`

	// merged
	// Required: true
	// Format: date-time
	Merged *strfmt.DateTime `json:"merged_at"`

	// merged commit ID
	// Required: true
	MergedCommitID *string `json:"merge_commit_sha"`

	// patch URL
	// Required: true
	PatchURL *string `json:"patch_url"`

	// title
	// Required: true
	Title *string `json:"title"`

	// URL
	// Required: true
	URL *string `json:"url"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// assignee
	// Required: true
	Assignee *RepoCreatePullRequestCreatedBodyAssignee `json:"assignee"`

	// base
	// Required: true
	Base *RepoCreatePullRequestCreatedBodyBase `json:"base"`

	// head
	// Required: true
	Head *RepoCreatePullRequestCreatedBodyHead `json:"head"`

	// merged by
	// Required: true
	MergedBy *RepoCreatePullRequestCreatedBodyMergedBy `json:"merged_by"`

	// milestone
	// Required: true
	Milestone *RepoCreatePullRequestCreatedBodyMilestone `json:"milestone"`

	// StateType issue state type
	// Required: true
	State *string `json:"state"`

	// user
	// Required: true
	User *RepoCreatePullRequestCreatedBodyUser `json:"user"`
}

// Validate validates this repo create pull request created body
func (o *RepoCreatePullRequestCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDiffURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHasMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergeBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergeable(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMerged(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedCommitID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePatchURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHead(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMergedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateAssignees(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"assignees", "body", o.Assignees); err != nil {
		return err
	}

	for i := 0; i < len(o.Assignees); i++ {
		if swag.IsZero(o.Assignees[i]) { // not required
			continue
		}

		if o.Assignees[i] != nil {
			if err := o.Assignees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoCreatePullRequestCreated" + "." + "assignees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"body", "body", o.Body); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateClosed(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"closed_at", "body", o.Closed); err != nil {
		return err
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"comments", "body", o.Comments); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateDeadline(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"due_date", "body", o.Deadline); err != nil {
		return err
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"due_date", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateDiffURL(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"diff_url", "body", o.DiffURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateHasMerged(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"merged", "body", o.HasMerged); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"number", "body", o.Index); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"labels", "body", o.Labels); err != nil {
		return err
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("repoCreatePullRequestCreated" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateMergeBase(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"merge_base", "body", o.MergeBase); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateMergeable(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"mergeable", "body", o.Mergeable); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateMerged(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"merged_at", "body", o.Merged); err != nil {
		return err
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"merged_at", "body", "date-time", o.Merged.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateMergedCommitID(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"merge_commit_sha", "body", o.MergedCommitID); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validatePatchURL(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"patch_url", "body", o.PatchURL); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateAssignee(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"assignee", "body", o.Assignee); err != nil {
		return err
	}

	if o.Assignee != nil {
		if err := o.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "assignee")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateBase(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"base", "body", o.Base); err != nil {
		return err
	}

	if o.Base != nil {
		if err := o.Base.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateHead(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"head", "body", o.Head); err != nil {
		return err
	}

	if o.Head != nil {
		if err := o.Head.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateMergedBy(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"merged_by", "body", o.MergedBy); err != nil {
		return err
	}

	if o.MergedBy != nil {
		if err := o.MergedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "merged_by")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateMilestone(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"milestone", "body", o.Milestone); err != nil {
		return err
	}

	if o.Milestone != nil {
		if err := o.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "milestone")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("repoCreatePullRequestCreated"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBody) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyAssignee User represents a user
swagger:model RepoCreatePullRequestCreatedBodyAssignee
*/
type RepoCreatePullRequestCreatedBodyAssignee struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body assignee
func (o *RepoCreatePullRequestCreatedBodyAssignee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyAssignee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"assignee"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyAssignee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyAssignee) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyAssignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBase PRBranchInfo information about a branch
swagger:model RepoCreatePullRequestCreatedBodyBase
*/
type RepoCreatePullRequestCreatedBodyBase struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoCreatePullRequestCreatedBodyBaseRepo `json:"repo,omitempty"`
}

// Validate validates this repo create pull request created body base
func (o *RepoCreatePullRequestCreatedBodyBase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBase) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBase) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBase) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepo Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyBaseRepo
*/
type RepoCreatePullRequestCreatedBodyBaseRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyBaseRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoCreatePullRequestCreatedBodyBaseRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyBaseRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body base repo
func (o *RepoCreatePullRequestCreatedBodyBaseRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepo) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoOwner
*/
type RepoCreatePullRequestCreatedBodyBaseRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body base repo owner
func (o *RepoCreatePullRequestCreatedBodyBaseRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParent Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParent
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyBaseRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoCreatePullRequestCreatedBodyBaseRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentOwner
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent owner
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentParent Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentParent
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent parent
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent parent owner
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent parent parent
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "base" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent parent parent owner
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"base"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent parent parent permissions
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent parent permissions
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions
*/
type RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body base repo parent permissions
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyBaseRepoPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyBaseRepoPermissions
*/
type RepoCreatePullRequestCreatedBodyBaseRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body base repo permissions
func (o *RepoCreatePullRequestCreatedBodyBaseRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyBaseRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyBaseRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHead PRBranchInfo information about a branch
swagger:model RepoCreatePullRequestCreatedBodyHead
*/
type RepoCreatePullRequestCreatedBodyHead struct {

	// name
	Name string `json:"label,omitempty"`

	// ref
	Ref string `json:"ref,omitempty"`

	// repo ID
	RepoID int64 `json:"repo_id,omitempty"`

	// sha
	Sha string `json:"sha,omitempty"`

	// repo
	Repo *RepoCreatePullRequestCreatedBodyHeadRepo `json:"repo,omitempty"`
}

// Validate validates this repo create pull request created body head
func (o *RepoCreatePullRequestCreatedBodyHead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHead) validateRepo(formats strfmt.Registry) error {

	if swag.IsZero(o.Repo) { // not required
		return nil
	}

	if o.Repo != nil {
		if err := o.Repo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHead) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHead) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepo Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyHeadRepo
*/
type RepoCreatePullRequestCreatedBodyHeadRepo struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyHeadRepoOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoCreatePullRequestCreatedBodyHeadRepoParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyHeadRepoPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body head repo
func (o *RepoCreatePullRequestCreatedBodyHeadRepo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepo) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepo) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepo) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepo) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepo) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoOwner
*/
type RepoCreatePullRequestCreatedBodyHeadRepoOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body head repo owner
func (o *RepoCreatePullRequestCreatedBodyHeadRepoOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParent Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParent
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyHeadRepoParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoCreatePullRequestCreatedBodyHeadRepoParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParent) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentOwner
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent owner
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentParent Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentParent
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent parent
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParent) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent parent owner
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent Repository represents a repository
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent struct {

	// clone URL
	CloneURL string `json:"clone_url,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// default branch
	DefaultBranch string `json:"default_branch,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// empty
	Empty bool `json:"empty,omitempty"`

	// fork
	Fork bool `json:"fork,omitempty"`

	// forks
	Forks int64 `json:"forks_count,omitempty"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// HTML URL
	HTMLURL string `json:"html_url,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// mirror
	Mirror bool `json:"mirror,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues_count,omitempty"`

	// private
	Private bool `json:"private,omitempty"`

	// SSH URL
	SSHURL string `json:"ssh_url,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// stars
	Stars int64 `json:"stars_count,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// watchers
	Watchers int64 `json:"watchers_count,omitempty"`

	// website
	Website string `json:"website,omitempty"`

	// owner
	Owner *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner `json:"owner,omitempty"`

	// parent
	Parent *models.Repository `json:"parent,omitempty"`

	// permissions
	Permissions *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions `json:"permissions,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent parent parent
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) validateOwner(formats strfmt.Registry) error {

	if swag.IsZero(o.Owner) { // not required
		return nil
	}

	if o.Owner != nil {
		if err := o.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "owner")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(o.Parent) { // not required
		return nil
	}

	if o.Parent != nil {
		if err := o.Parent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "parent")
			}
			return err
		}
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	if o.Permissions != nil {
		if err := o.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repoCreatePullRequestCreated" + "." + "head" + "." + "repo" + "." + "parent" + "." + "parent" + "." + "parent" + "." + "permissions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentParentParent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner User represents a user
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent parent parent owner
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"head"+"."+"repo"+"."+"parent"+"."+"parent"+"."+"parent"+"."+"owner"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent parent parent permissions
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent parent permissions
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions
*/
type RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body head repo parent permissions
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoParentPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyHeadRepoPermissions Permission represents a set of permissions
swagger:model RepoCreatePullRequestCreatedBodyHeadRepoPermissions
*/
type RepoCreatePullRequestCreatedBodyHeadRepoPermissions struct {

	// admin
	Admin bool `json:"admin,omitempty"`

	// pull
	Pull bool `json:"pull,omitempty"`

	// push
	Push bool `json:"push,omitempty"`
}

// Validate validates this repo create pull request created body head repo permissions
func (o *RepoCreatePullRequestCreatedBodyHeadRepoPermissions) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoPermissions) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyHeadRepoPermissions) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyHeadRepoPermissions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyMergedBy User represents a user
swagger:model RepoCreatePullRequestCreatedBodyMergedBy
*/
type RepoCreatePullRequestCreatedBodyMergedBy struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body merged by
func (o *RepoCreatePullRequestCreatedBodyMergedBy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyMergedBy) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"merged_by"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyMergedBy) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyMergedBy) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyMergedBy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyMilestone Milestone milestone is a collection of issues on one repository
swagger:model RepoCreatePullRequestCreatedBodyMilestone
*/
type RepoCreatePullRequestCreatedBodyMilestone struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this repo create pull request created body milestone
func (o *RepoCreatePullRequestCreatedBodyMilestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyMilestone) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"milestone"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoCreatePullRequestCreatedBodyMilestone) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"milestone"+"."+"due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyMilestone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyMilestone) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyMilestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoCreatePullRequestCreatedBodyUser User represents a user
swagger:model RepoCreatePullRequestCreatedBodyUser
*/
type RepoCreatePullRequestCreatedBodyUser struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo create pull request created body user
func (o *RepoCreatePullRequestCreatedBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoCreatePullRequestCreatedBodyUser) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("repoCreatePullRequestCreated"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoCreatePullRequestCreatedBodyUser) UnmarshalBinary(b []byte) error {
	var res RepoCreatePullRequestCreatedBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
