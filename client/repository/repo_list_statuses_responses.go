// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// RepoListStatusesReader is a Reader for the RepoListStatuses structure.
type RepoListStatusesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RepoListStatusesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRepoListStatusesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRepoListStatusesOK creates a RepoListStatusesOK with default headers values
func NewRepoListStatusesOK() *RepoListStatusesOK {
	return &RepoListStatusesOK{}
}

/*RepoListStatusesOK handles this case with default header values.

StatusList
*/
type RepoListStatusesOK struct {
	Payload []*models.RepoListStatusesOKBodyItems0
}

func (o *RepoListStatusesOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/statuses/{sha}][%d] repoListStatusesOK  %+v", 200, o.Payload)
}

func (o *RepoListStatusesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RepoListStatusesOKBodyItems0 Status holds a single Status of a single Commit
swagger:model RepoListStatusesOKBodyItems0
*/
type RepoListStatusesOKBodyItems0 struct {

	// context
	Context string `json:"context,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// target URL
	TargetURL string `json:"target_url,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// creator
	Creator *RepoListStatusesOKBodyItems0Creator `json:"creator,omitempty"`

	// StatusState holds the state of a Status
	// It can be "pending", "success", "error", "failure", and "warning"
	Status string `json:"status,omitempty"`
}

// Validate validates this repo list statuses o k body items0
func (o *RepoListStatusesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListStatusesOKBodyItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListStatusesOKBodyItems0) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *RepoListStatusesOKBodyItems0) validateCreator(formats strfmt.Registry) error {

	if swag.IsZero(o.Creator) { // not required
		return nil
	}

	if o.Creator != nil {
		if err := o.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListStatusesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListStatusesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res RepoListStatusesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*RepoListStatusesOKBodyItems0Creator User represents a user
swagger:model RepoListStatusesOKBodyItems0Creator
*/
type RepoListStatusesOKBodyItems0Creator struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this repo list statuses o k body items0 creator
func (o *RepoListStatusesOKBodyItems0Creator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RepoListStatusesOKBodyItems0Creator) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("creator"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RepoListStatusesOKBodyItems0Creator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RepoListStatusesOKBodyItems0Creator) UnmarshalBinary(b []byte) error {
	var res RepoListStatusesOKBodyItems0Creator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
