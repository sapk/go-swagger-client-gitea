// Code generated by go-swagger; DO NOT EDIT.

package repository

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UserCurrentPutSubscriptionReader is a Reader for the UserCurrentPutSubscription structure.
type UserCurrentPutSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCurrentPutSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserCurrentPutSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserCurrentPutSubscriptionOK creates a UserCurrentPutSubscriptionOK with default headers values
func NewUserCurrentPutSubscriptionOK() *UserCurrentPutSubscriptionOK {
	return &UserCurrentPutSubscriptionOK{}
}

/*UserCurrentPutSubscriptionOK handles this case with default header values.

WatchInfo
*/
type UserCurrentPutSubscriptionOK struct {
	Payload UserCurrentPutSubscriptionOKBody
}

func (o *UserCurrentPutSubscriptionOK) Error() string {
	return fmt.Sprintf("[PUT /repos/{owner}/{repo}/subscription][%d] userCurrentPutSubscriptionOK  %+v", 200, o.Payload)
}

func (o *UserCurrentPutSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UserCurrentPutSubscriptionOKBody WatchInfo represents an API watch status of one repository
swagger:model UserCurrentPutSubscriptionOKBody
*/
type UserCurrentPutSubscriptionOKBody struct {

	// created at
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// ignored
	// Required: true
	Ignored *bool `json:"ignored"`

	// reason
	// Required: true
	Reason interface{} `json:"reason"`

	// repository URL
	// Required: true
	RepositoryURL *string `json:"repository_url"`

	// subscribed
	// Required: true
	Subscribed *bool `json:"subscribed"`

	// URL
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this user current put subscription o k body
func (o *UserCurrentPutSubscriptionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIgnored(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRepositoryURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubscribed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserCurrentPutSubscriptionOKBody) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPutSubscriptionOK"+"."+"created_at", "body", o.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("userCurrentPutSubscriptionOK"+"."+"created_at", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPutSubscriptionOKBody) validateIgnored(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPutSubscriptionOK"+"."+"ignored", "body", o.Ignored); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPutSubscriptionOKBody) validateReason(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPutSubscriptionOK"+"."+"reason", "body", o.Reason); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPutSubscriptionOKBody) validateRepositoryURL(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPutSubscriptionOK"+"."+"repository_url", "body", o.RepositoryURL); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPutSubscriptionOKBody) validateSubscribed(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPutSubscriptionOK"+"."+"subscribed", "body", o.Subscribed); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPutSubscriptionOKBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPutSubscriptionOK"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserCurrentPutSubscriptionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserCurrentPutSubscriptionOKBody) UnmarshalBinary(b []byte) error {
	var res UserCurrentPutSubscriptionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
