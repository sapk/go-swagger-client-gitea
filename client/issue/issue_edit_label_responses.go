// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// IssueEditLabelReader is a Reader for the IssueEditLabel structure.
type IssueEditLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueEditLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIssueEditLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueEditLabelOK creates a IssueEditLabelOK with default headers values
func NewIssueEditLabelOK() *IssueEditLabelOK {
	return &IssueEditLabelOK{}
}

/*IssueEditLabelOK handles this case with default header values.

Label
*/
type IssueEditLabelOK struct {
	Payload IssueEditLabelOKBody
}

func (o *IssueEditLabelOK) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/labels/{id}][%d] issueEditLabelOK  %+v", 200, o.Payload)
}

func (o *IssueEditLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IssueEditLabelBody EditLabelOption options for editing a label
swagger:model IssueEditLabelBody
*/
type IssueEditLabelBody struct {

	// color
	Color string `json:"color,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// MarshalBinary interface implementation
func (o *IssueEditLabelBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditLabelBody) UnmarshalBinary(b []byte) error {
	var res IssueEditLabelBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditLabelOKBody Label a label to an issue or a pr
swagger:model IssueEditLabelOKBody
*/
type IssueEditLabelOKBody struct {

	// color
	// Required: true
	Color *string `json:"color"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// URL
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this issue edit label o k body
func (o *IssueEditLabelOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditLabelOKBody) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("issueEditLabelOK"+"."+"color", "body", o.Color); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditLabelOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("issueEditLabelOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditLabelOKBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("issueEditLabelOK"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditLabelOKBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("issueEditLabelOK"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditLabelOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditLabelOKBody) UnmarshalBinary(b []byte) error {
	var res IssueEditLabelOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
