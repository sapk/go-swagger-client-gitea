// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// IssueEditIssueReader is a Reader for the IssueEditIssue structure.
type IssueEditIssueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueEditIssueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewIssueEditIssueCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueEditIssueCreated creates a IssueEditIssueCreated with default headers values
func NewIssueEditIssueCreated() *IssueEditIssueCreated {
	return &IssueEditIssueCreated{}
}

/*IssueEditIssueCreated handles this case with default header values.

Issue
*/
type IssueEditIssueCreated struct {
	Payload IssueEditIssueCreatedBody
}

func (o *IssueEditIssueCreated) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/{index}][%d] issueEditIssueCreated  %+v", 201, o.Payload)
}

func (o *IssueEditIssueCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AssigneesItems0 User represents a user
swagger:model AssigneesItems0
*/
type AssigneesItems0 struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this assignees items0
func (o *AssigneesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AssigneesItems0) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AssigneesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AssigneesItems0) UnmarshalBinary(b []byte) error {
	var res AssigneesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditIssueBody EditIssueOption options for editing an issue
swagger:model IssueEditIssueBody
*/
type IssueEditIssueBody struct {

	// assignee
	Assignee string `json:"assignee,omitempty"`

	// assignees
	Assignees []string `json:"assignees"`

	// body
	Body string `json:"body,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_date,omitempty"`

	// milestone
	Milestone int64 `json:"milestone,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// MarshalBinary interface implementation
func (o *IssueEditIssueBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditIssueBody) UnmarshalBinary(b []byte) error {
	var res IssueEditIssueBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditIssueCreatedBody Issue represents an issue in a repository
swagger:model IssueEditIssueCreatedBody
*/
type IssueEditIssueCreatedBody struct {

	// assignees
	// Required: true
	Assignees []*models.AssigneesItems0 `json:"assignees"`

	// body
	// Required: true
	Body *string `json:"body"`

	// closed
	// Required: true
	// Format: date-time
	Closed *strfmt.DateTime `json:"closed_at"`

	// comments
	// Required: true
	Comments *int64 `json:"comments"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// deadline
	// Required: true
	// Format: date-time
	Deadline *strfmt.DateTime `json:"due_date"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// index
	// Required: true
	Index *int64 `json:"number"`

	// labels
	// Required: true
	Labels []*models.LabelsItems0 `json:"labels"`

	// title
	// Required: true
	Title *string `json:"title"`

	// URL
	// Required: true
	URL *string `json:"url"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// assignee
	// Required: true
	Assignee *IssueEditIssueCreatedBodyAssignee `json:"assignee"`

	// milestone
	// Required: true
	Milestone *IssueEditIssueCreatedBodyMilestone `json:"milestone"`

	// pull request
	// Required: true
	PullRequest *IssueEditIssueCreatedBodyPullRequest `json:"pull_request"`

	// StateType issue state type
	// Required: true
	State *string `json:"state"`

	// user
	// Required: true
	User *IssueEditIssueCreatedBodyUser `json:"user"`
}

// Validate validates this issue edit issue created body
func (o *IssueEditIssueCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePullRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditIssueCreatedBody) validateAssignees(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"assignees", "body", o.Assignees); err != nil {
		return err
	}

	for i := 0; i < len(o.Assignees); i++ {
		if swag.IsZero(o.Assignees[i]) { // not required
			continue
		}

		if o.Assignees[i] != nil {
			if err := o.Assignees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issueEditIssueCreated" + "." + "assignees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"body", "body", o.Body); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateClosed(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"closed_at", "body", o.Closed); err != nil {
		return err
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateComments(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"comments", "body", o.Comments); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateDeadline(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"due_date", "body", o.Deadline); err != nil {
		return err
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"due_date", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"number", "body", o.Index); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"labels", "body", o.Labels); err != nil {
		return err
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("issueEditIssueCreated" + "." + "labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateAssignee(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"assignee", "body", o.Assignee); err != nil {
		return err
	}

	if o.Assignee != nil {
		if err := o.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueEditIssueCreated" + "." + "assignee")
			}
			return err
		}
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateMilestone(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"milestone", "body", o.Milestone); err != nil {
		return err
	}

	if o.Milestone != nil {
		if err := o.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueEditIssueCreated" + "." + "milestone")
			}
			return err
		}
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validatePullRequest(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"pull_request", "body", o.PullRequest); err != nil {
		return err
	}

	if o.PullRequest != nil {
		if err := o.PullRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueEditIssueCreated" + "." + "pull_request")
			}
			return err
		}
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateState(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"state", "body", o.State); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("issueEditIssueCreated"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueEditIssueCreated" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditIssueCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditIssueCreatedBody) UnmarshalBinary(b []byte) error {
	var res IssueEditIssueCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditIssueCreatedBodyAssignee User represents a user
swagger:model IssueEditIssueCreatedBodyAssignee
*/
type IssueEditIssueCreatedBodyAssignee struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this issue edit issue created body assignee
func (o *IssueEditIssueCreatedBodyAssignee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditIssueCreatedBodyAssignee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"assignee"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyAssignee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyAssignee) UnmarshalBinary(b []byte) error {
	var res IssueEditIssueCreatedBodyAssignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditIssueCreatedBodyMilestone Milestone milestone is a collection of issues on one repository
swagger:model IssueEditIssueCreatedBodyMilestone
*/
type IssueEditIssueCreatedBodyMilestone struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this issue edit issue created body milestone
func (o *IssueEditIssueCreatedBodyMilestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditIssueCreatedBodyMilestone) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"milestone"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditIssueCreatedBodyMilestone) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"milestone"+"."+"due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyMilestone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyMilestone) UnmarshalBinary(b []byte) error {
	var res IssueEditIssueCreatedBodyMilestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditIssueCreatedBodyPullRequest PullRequestMeta PR info if an issue is a PR
swagger:model IssueEditIssueCreatedBodyPullRequest
*/
type IssueEditIssueCreatedBodyPullRequest struct {

	// has merged
	HasMerged bool `json:"merged,omitempty"`

	// merged
	// Format: date-time
	Merged strfmt.DateTime `json:"merged_at,omitempty"`
}

// Validate validates this issue edit issue created body pull request
func (o *IssueEditIssueCreatedBodyPullRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerged(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditIssueCreatedBodyPullRequest) validateMerged(formats strfmt.Registry) error {

	if swag.IsZero(o.Merged) { // not required
		return nil
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"pull_request"+"."+"merged_at", "body", "date-time", o.Merged.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyPullRequest) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyPullRequest) UnmarshalBinary(b []byte) error {
	var res IssueEditIssueCreatedBodyPullRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditIssueCreatedBodyUser User represents a user
swagger:model IssueEditIssueCreatedBodyUser
*/
type IssueEditIssueCreatedBodyUser struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this issue edit issue created body user
func (o *IssueEditIssueCreatedBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditIssueCreatedBodyUser) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("issueEditIssueCreated"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditIssueCreatedBodyUser) UnmarshalBinary(b []byte) error {
	var res IssueEditIssueCreatedBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LabelsItems0 Label a label to an issue or a pr
swagger:model LabelsItems0
*/
type LabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`
}

// Validate validates this labels items0
func (o *LabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LabelsItems0) UnmarshalBinary(b []byte) error {
	var res LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
