// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// IssueGetMilestonesListReader is a Reader for the IssueGetMilestonesList structure.
type IssueGetMilestonesListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueGetMilestonesListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIssueGetMilestonesListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueGetMilestonesListOK creates a IssueGetMilestonesListOK with default headers values
func NewIssueGetMilestonesListOK() *IssueGetMilestonesListOK {
	return &IssueGetMilestonesListOK{}
}

/*IssueGetMilestonesListOK handles this case with default header values.

MilestoneList
*/
type IssueGetMilestonesListOK struct {
	Payload []*models.IssueGetMilestonesListOKBodyItems0
}

func (o *IssueGetMilestonesListOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/milestones][%d] issueGetMilestonesListOK  %+v", 200, o.Payload)
}

func (o *IssueGetMilestonesListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IssueGetMilestonesListOKBodyItems0 Milestone milestone is a collection of issues on one repository
swagger:model IssueGetMilestonesListOKBodyItems0
*/
type IssueGetMilestonesListOKBodyItems0 struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this issue get milestones list o k body items0
func (o *IssueGetMilestonesListOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueGetMilestonesListOKBodyItems0) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueGetMilestonesListOKBodyItems0) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueGetMilestonesListOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueGetMilestonesListOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res IssueGetMilestonesListOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
