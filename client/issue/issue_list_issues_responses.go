// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// IssueListIssuesReader is a Reader for the IssueListIssues structure.
type IssueListIssuesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueListIssuesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIssueListIssuesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueListIssuesOK creates a IssueListIssuesOK with default headers values
func NewIssueListIssuesOK() *IssueListIssuesOK {
	return &IssueListIssuesOK{}
}

/*IssueListIssuesOK handles this case with default header values.

IssueList
*/
type IssueListIssuesOK struct {
	Payload []*models.IssueListIssuesOKBodyItems0
}

func (o *IssueListIssuesOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues][%d] issueListIssuesOK  %+v", 200, o.Payload)
}

func (o *IssueListIssuesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IssueListIssuesOKBodyItems0 Issue represents an issue in a repository
swagger:model IssueListIssuesOKBodyItems0
*/
type IssueListIssuesOKBodyItems0 struct {

	// assignees
	Assignees []*models.IssueListIssuesOKBodyItems0AssigneesItems0 `json:"assignees"`

	// body
	Body string `json:"body,omitempty"`

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// comments
	Comments int64 `json:"comments,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_date,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// index
	Index int64 `json:"number,omitempty"`

	// labels
	Labels []*models.IssueListIssuesOKBodyItems0LabelsItems0 `json:"labels"`

	// title
	Title string `json:"title,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated_at,omitempty"`

	// assignee
	Assignee *IssueListIssuesOKBodyItems0Assignee `json:"assignee,omitempty"`

	// milestone
	Milestone *IssueListIssuesOKBodyItems0Milestone `json:"milestone,omitempty"`

	// pull request
	PullRequest *IssueListIssuesOKBodyItems0PullRequest `json:"pull_request,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`

	// user
	User *IssueListIssuesOKBodyItems0User `json:"user,omitempty"`
}

// Validate validates this issue list issues o k body items0
func (o *IssueListIssuesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAssignees(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMilestone(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePullRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateAssignees(formats strfmt.Registry) error {

	if swag.IsZero(o.Assignees) { // not required
		return nil
	}

	for i := 0; i < len(o.Assignees); i++ {
		if swag.IsZero(o.Assignees[i]) { // not required
			continue
		}

		if o.Assignees[i] != nil {
			if err := o.Assignees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("due_date", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateLabels(formats strfmt.Registry) error {

	if swag.IsZero(o.Labels) { // not required
		return nil
	}

	for i := 0; i < len(o.Labels); i++ {
		if swag.IsZero(o.Labels[i]) { // not required
			continue
		}

		if o.Labels[i] != nil {
			if err := o.Labels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateUpdated(formats strfmt.Registry) error {

	if swag.IsZero(o.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateAssignee(formats strfmt.Registry) error {

	if swag.IsZero(o.Assignee) { // not required
		return nil
	}

	if o.Assignee != nil {
		if err := o.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateMilestone(formats strfmt.Registry) error {

	if swag.IsZero(o.Milestone) { // not required
		return nil
	}

	if o.Milestone != nil {
		if err := o.Milestone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("milestone")
			}
			return err
		}
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validatePullRequest(formats strfmt.Registry) error {

	if swag.IsZero(o.PullRequest) { // not required
		return nil
	}

	if o.PullRequest != nil {
		if err := o.PullRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pull_request")
			}
			return err
		}
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueListIssuesOKBodyItems0Assignee User represents a user
swagger:model IssueListIssuesOKBodyItems0Assignee
*/
type IssueListIssuesOKBodyItems0Assignee struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this issue list issues o k body items0 assignee
func (o *IssueListIssuesOKBodyItems0Assignee) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueListIssuesOKBodyItems0Assignee) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("assignee"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0Assignee) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0Assignee) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0Assignee
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueListIssuesOKBodyItems0AssigneesItems0 User represents a user
swagger:model IssueListIssuesOKBodyItems0AssigneesItems0
*/
type IssueListIssuesOKBodyItems0AssigneesItems0 struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this issue list issues o k body items0 assignees items0
func (o *IssueListIssuesOKBodyItems0AssigneesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueListIssuesOKBodyItems0AssigneesItems0) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0AssigneesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0AssigneesItems0) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0AssigneesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueListIssuesOKBodyItems0LabelsItems0 Label a label to an issue or a pr
swagger:model IssueListIssuesOKBodyItems0LabelsItems0
*/
type IssueListIssuesOKBodyItems0LabelsItems0 struct {

	// color
	Color string `json:"color,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// URL
	URL string `json:"url,omitempty"`
}

// Validate validates this issue list issues o k body items0 labels items0
func (o *IssueListIssuesOKBodyItems0LabelsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0LabelsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0LabelsItems0) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0LabelsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueListIssuesOKBodyItems0Milestone Milestone milestone is a collection of issues on one repository
swagger:model IssueListIssuesOKBodyItems0Milestone
*/
type IssueListIssuesOKBodyItems0Milestone struct {

	// closed
	// Format: date-time
	Closed strfmt.DateTime `json:"closed_at,omitempty"`

	// closed issues
	ClosedIssues int64 `json:"closed_issues,omitempty"`

	// deadline
	// Format: date-time
	Deadline strfmt.DateTime `json:"due_on,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// open issues
	OpenIssues int64 `json:"open_issues,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// StateType issue state type
	State string `json:"state,omitempty"`
}

// Validate validates this issue list issues o k body items0 milestone
func (o *IssueListIssuesOKBodyItems0Milestone) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClosed(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDeadline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueListIssuesOKBodyItems0Milestone) validateClosed(formats strfmt.Registry) error {

	if swag.IsZero(o.Closed) { // not required
		return nil
	}

	if err := validate.FormatOf("milestone"+"."+"closed_at", "body", "date-time", o.Closed.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueListIssuesOKBodyItems0Milestone) validateDeadline(formats strfmt.Registry) error {

	if swag.IsZero(o.Deadline) { // not required
		return nil
	}

	if err := validate.FormatOf("milestone"+"."+"due_on", "body", "date-time", o.Deadline.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0Milestone) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0Milestone) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0Milestone
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueListIssuesOKBodyItems0PullRequest PullRequestMeta PR info if an issue is a PR
swagger:model IssueListIssuesOKBodyItems0PullRequest
*/
type IssueListIssuesOKBodyItems0PullRequest struct {

	// has merged
	HasMerged bool `json:"merged,omitempty"`

	// merged
	// Format: date-time
	Merged strfmt.DateTime `json:"merged_at,omitempty"`
}

// Validate validates this issue list issues o k body items0 pull request
func (o *IssueListIssuesOKBodyItems0PullRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMerged(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueListIssuesOKBodyItems0PullRequest) validateMerged(formats strfmt.Registry) error {

	if swag.IsZero(o.Merged) { // not required
		return nil
	}

	if err := validate.FormatOf("pull_request"+"."+"merged_at", "body", "date-time", o.Merged.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0PullRequest) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0PullRequest) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0PullRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueListIssuesOKBodyItems0User User represents a user
swagger:model IssueListIssuesOKBodyItems0User
*/
type IssueListIssuesOKBodyItems0User struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this issue list issues o k body items0 user
func (o *IssueListIssuesOKBodyItems0User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueListIssuesOKBodyItems0User) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0User) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueListIssuesOKBodyItems0User) UnmarshalBinary(b []byte) error {
	var res IssueListIssuesOKBodyItems0User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
