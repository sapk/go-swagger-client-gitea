// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// IssueTrackedTimesReader is a Reader for the IssueTrackedTimes structure.
type IssueTrackedTimesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueTrackedTimesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIssueTrackedTimesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueTrackedTimesOK creates a IssueTrackedTimesOK with default headers values
func NewIssueTrackedTimesOK() *IssueTrackedTimesOK {
	return &IssueTrackedTimesOK{}
}

/*IssueTrackedTimesOK handles this case with default header values.

TrackedTimeList
*/
type IssueTrackedTimesOK struct {
	Payload []*models.IssueTrackedTimesOKBodyItems0
}

func (o *IssueTrackedTimesOK) Error() string {
	return fmt.Sprintf("[GET /repos/{owner}/{repo}/issues/{id}/times][%d] issueTrackedTimesOK  %+v", 200, o.Payload)
}

func (o *IssueTrackedTimesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IssueTrackedTimesOKBodyItems0 TrackedTime worked time for an issue / pr
swagger:model IssueTrackedTimesOKBodyItems0
*/
type IssueTrackedTimesOKBodyItems0 struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// issue ID
	IssueID int64 `json:"issue_id,omitempty"`

	// Time in seconds
	Time int64 `json:"time,omitempty"`

	// user ID
	UserID int64 `json:"user_id,omitempty"`
}

// Validate validates this issue tracked times o k body items0
func (o *IssueTrackedTimesOKBodyItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueTrackedTimesOKBodyItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueTrackedTimesOKBodyItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueTrackedTimesOKBodyItems0) UnmarshalBinary(b []byte) error {
	var res IssueTrackedTimesOKBodyItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
