// Code generated by go-swagger; DO NOT EDIT.

package issue

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// IssueEditCommentReader is a Reader for the IssueEditComment structure.
type IssueEditCommentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueEditCommentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewIssueEditCommentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewIssueEditCommentOK creates a IssueEditCommentOK with default headers values
func NewIssueEditCommentOK() *IssueEditCommentOK {
	return &IssueEditCommentOK{}
}

/*IssueEditCommentOK handles this case with default header values.

Comment
*/
type IssueEditCommentOK struct {
	Payload IssueEditCommentOKBody
}

func (o *IssueEditCommentOK) Error() string {
	return fmt.Sprintf("[PATCH /repos/{owner}/{repo}/issues/comments/{id}][%d] issueEditCommentOK  %+v", 200, o.Payload)
}

func (o *IssueEditCommentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IssueEditCommentBody EditIssueCommentOption options for editing a comment
swagger:model IssueEditCommentBody
*/
type IssueEditCommentBody struct {

	// body
	// Required: true
	Body *string `json:"body"`
}

// MarshalBinary interface implementation
func (o *IssueEditCommentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditCommentBody) UnmarshalBinary(b []byte) error {
	var res IssueEditCommentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditCommentOKBody Comment represents a comment on a commit or issue
swagger:model IssueEditCommentOKBody
*/
type IssueEditCommentOKBody struct {

	// body
	// Required: true
	Body *string `json:"body"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// HTML URL
	// Required: true
	HTMLURL *string `json:"html_url"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// issue URL
	// Required: true
	IssueURL *string `json:"issue_url"`

	// p r URL
	// Required: true
	PRURL *string `json:"pull_request_url"`

	// updated
	// Required: true
	// Format: date-time
	Updated *strfmt.DateTime `json:"updated_at"`

	// user
	// Required: true
	User *IssueEditCommentOKBodyUser `json:"user"`
}

// Validate validates this issue edit comment o k body
func (o *IssueEditCommentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHTMLURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIssueURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePRURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditCommentOKBody) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"body", "body", o.Body); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("issueEditCommentOK"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validateHTMLURL(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"html_url", "body", o.HTMLURL); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validateIssueURL(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"issue_url", "body", o.IssueURL); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validatePRURL(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"pull_request_url", "body", o.PRURL); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"updated_at", "body", o.Updated); err != nil {
		return err
	}

	if err := validate.FormatOf("issueEditCommentOK"+"."+"updated_at", "body", "date-time", o.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *IssueEditCommentOKBody) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("issueEditCommentOK"+"."+"user", "body", o.User); err != nil {
		return err
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueEditCommentOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditCommentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditCommentOKBody) UnmarshalBinary(b []byte) error {
	var res IssueEditCommentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IssueEditCommentOKBodyUser User represents a user
swagger:model IssueEditCommentOKBodyUser
*/
type IssueEditCommentOKBodyUser struct {

	// URL to the user's avatar
	AvatarURL string `json:"avatar_url,omitempty"`

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// the user's full name
	FullName string `json:"full_name,omitempty"`

	// the user's id
	ID int64 `json:"id,omitempty"`

	// User locale
	Language string `json:"language,omitempty"`

	// the user's username
	UserName string `json:"login,omitempty"`
}

// Validate validates this issue edit comment o k body user
func (o *IssueEditCommentOKBodyUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IssueEditCommentOKBodyUser) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(o.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("issueEditCommentOK"+"."+"user"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IssueEditCommentOKBodyUser) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IssueEditCommentOKBodyUser) UnmarshalBinary(b []byte) error {
	var res IssueEditCommentOKBodyUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
