// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UserGetCurrentReader is a Reader for the UserGetCurrent structure.
type UserGetCurrentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserGetCurrentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserGetCurrentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserGetCurrentOK creates a UserGetCurrentOK with default headers values
func NewUserGetCurrentOK() *UserGetCurrentOK {
	return &UserGetCurrentOK{}
}

/*UserGetCurrentOK handles this case with default header values.

User
*/
type UserGetCurrentOK struct {
	Payload UserGetCurrentOKBody
}

func (o *UserGetCurrentOK) Error() string {
	return fmt.Sprintf("[GET /user][%d] userGetCurrentOK  %+v", 200, o.Payload)
}

func (o *UserGetCurrentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UserGetCurrentOKBody User represents a user
swagger:model UserGetCurrentOKBody
*/
type UserGetCurrentOKBody struct {

	// URL to the user's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// the user's full name
	// Required: true
	FullName *string `json:"full_name"`

	// the user's id
	// Required: true
	ID *int64 `json:"id"`

	// User locale
	// Required: true
	Language *string `json:"language"`

	// the user's username
	// Required: true
	UserName *string `json:"login"`
}

// Validate validates this user get current o k body
func (o *UserGetCurrentOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserGetCurrentOKBody) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("userGetCurrentOK"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *UserGetCurrentOKBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("userGetCurrentOK"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("userGetCurrentOK"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UserGetCurrentOKBody) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("userGetCurrentOK"+"."+"full_name", "body", o.FullName); err != nil {
		return err
	}

	return nil
}

func (o *UserGetCurrentOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("userGetCurrentOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UserGetCurrentOKBody) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("userGetCurrentOK"+"."+"language", "body", o.Language); err != nil {
		return err
	}

	return nil
}

func (o *UserGetCurrentOKBody) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userGetCurrentOK"+"."+"login", "body", o.UserName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserGetCurrentOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserGetCurrentOKBody) UnmarshalBinary(b []byte) error {
	var res UserGetCurrentOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
