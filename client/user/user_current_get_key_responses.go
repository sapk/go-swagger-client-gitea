// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UserCurrentGetKeyReader is a Reader for the UserCurrentGetKey structure.
type UserCurrentGetKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCurrentGetKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUserCurrentGetKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUserCurrentGetKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserCurrentGetKeyOK creates a UserCurrentGetKeyOK with default headers values
func NewUserCurrentGetKeyOK() *UserCurrentGetKeyOK {
	return &UserCurrentGetKeyOK{}
}

/*UserCurrentGetKeyOK handles this case with default header values.

PublicKey
*/
type UserCurrentGetKeyOK struct {
	Payload UserCurrentGetKeyOKBody
}

func (o *UserCurrentGetKeyOK) Error() string {
	return fmt.Sprintf("[GET /user/keys/{id}][%d] userCurrentGetKeyOK  %+v", 200, o.Payload)
}

func (o *UserCurrentGetKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCurrentGetKeyNotFound creates a UserCurrentGetKeyNotFound with default headers values
func NewUserCurrentGetKeyNotFound() *UserCurrentGetKeyNotFound {
	return &UserCurrentGetKeyNotFound{}
}

/*UserCurrentGetKeyNotFound handles this case with default header values.

APINotFound is a not found empty response
*/
type UserCurrentGetKeyNotFound struct {
}

func (o *UserCurrentGetKeyNotFound) Error() string {
	return fmt.Sprintf("[GET /user/keys/{id}][%d] userCurrentGetKeyNotFound ", 404)
}

func (o *UserCurrentGetKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UserCurrentGetKeyOKBody PublicKey publickey is a user key to push code to repository
swagger:model UserCurrentGetKeyOKBody
*/
type UserCurrentGetKeyOKBody struct {

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// fingerprint
	// Required: true
	Fingerprint *string `json:"fingerprint"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// key
	// Required: true
	Key *string `json:"key"`

	// title
	// Required: true
	Title *string `json:"title"`

	// URL
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this user current get key o k body
func (o *UserCurrentGetKeyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserCurrentGetKeyOKBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentGetKeyOK"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("userCurrentGetKeyOK"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentGetKeyOKBody) validateFingerprint(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentGetKeyOK"+"."+"fingerprint", "body", o.Fingerprint); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentGetKeyOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentGetKeyOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentGetKeyOKBody) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentGetKeyOK"+"."+"key", "body", o.Key); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentGetKeyOKBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentGetKeyOK"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentGetKeyOKBody) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentGetKeyOK"+"."+"url", "body", o.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserCurrentGetKeyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserCurrentGetKeyOKBody) UnmarshalBinary(b []byte) error {
	var res UserCurrentGetKeyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
