// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/sapk/go-swagger-client-gitea/models"
)

// UserCurrentPostGPGKeyReader is a Reader for the UserCurrentPostGPGKey structure.
type UserCurrentPostGPGKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCurrentPostGPGKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewUserCurrentPostGPGKeyCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 422:
		result := NewUserCurrentPostGPGKeyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserCurrentPostGPGKeyCreated creates a UserCurrentPostGPGKeyCreated with default headers values
func NewUserCurrentPostGPGKeyCreated() *UserCurrentPostGPGKeyCreated {
	return &UserCurrentPostGPGKeyCreated{}
}

/*UserCurrentPostGPGKeyCreated handles this case with default header values.

GPGKey
*/
type UserCurrentPostGPGKeyCreated struct {
	Payload UserCurrentPostGPGKeyCreatedBody
}

func (o *UserCurrentPostGPGKeyCreated) Error() string {
	return fmt.Sprintf("[POST /user/gpg_keys][%d] userCurrentPostGPGKeyCreated  %+v", 201, o.Payload)
}

func (o *UserCurrentPostGPGKeyCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCurrentPostGPGKeyUnprocessableEntity creates a UserCurrentPostGPGKeyUnprocessableEntity with default headers values
func NewUserCurrentPostGPGKeyUnprocessableEntity() *UserCurrentPostGPGKeyUnprocessableEntity {
	return &UserCurrentPostGPGKeyUnprocessableEntity{}
}

/*UserCurrentPostGPGKeyUnprocessableEntity handles this case with default header values.

APIValidationError is error format response related to input validation
*/
type UserCurrentPostGPGKeyUnprocessableEntity struct {
	Message string

	URL string
}

func (o *UserCurrentPostGPGKeyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /user/gpg_keys][%d] userCurrentPostGPGKeyUnprocessableEntity ", 422)
}

func (o *UserCurrentPostGPGKeyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

/*EmailsItems0 GPGKeyEmail an email attached to a GPGKey
swagger:model EmailsItems0
*/
type EmailsItems0 struct {

	// email
	Email string `json:"email,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this emails items0
func (o *EmailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *EmailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *EmailsItems0) UnmarshalBinary(b []byte) error {
	var res EmailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubkeysItems0 GPGKey a user GPG key to sign commit and tag in repository
swagger:model SubkeysItems0
*/
type SubkeysItems0 struct {

	// can certify
	CanCertify bool `json:"can_certify,omitempty"`

	// can encrypt comms
	CanEncryptComms bool `json:"can_encrypt_comms,omitempty"`

	// can encrypt storage
	CanEncryptStorage bool `json:"can_encrypt_storage,omitempty"`

	// can sign
	CanSign bool `json:"can_sign,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// emails
	Emails []*models.SubkeysItems0EmailsItems0 `json:"emails"`

	// expires
	// Format: date-time
	Expires strfmt.DateTime `json:"expires_at,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// key ID
	KeyID string `json:"key_id,omitempty"`

	// primary key ID
	PrimaryKeyID string `json:"primary_key_id,omitempty"`

	// public key
	PublicKey string `json:"public_key,omitempty"`

	// subs key
	SubsKey []*models.SubkeysItems0SubkeysItems0 `json:"subkeys"`
}

// Validate validates this subkeys items0
func (o *SubkeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubsKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubkeysItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SubkeysItems0) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(o.Emails) { // not required
		return nil
	}

	for i := 0; i < len(o.Emails); i++ {
		if swag.IsZero(o.Emails[i]) { // not required
			continue
		}

		if o.Emails[i] != nil {
			if err := o.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SubkeysItems0) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(o.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SubkeysItems0) validateSubsKey(formats strfmt.Registry) error {

	if swag.IsZero(o.SubsKey) { // not required
		return nil
	}

	for i := 0; i < len(o.SubsKey); i++ {
		if swag.IsZero(o.SubsKey[i]) { // not required
			continue
		}

		if o.SubsKey[i] != nil {
			if err := o.SubsKey[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subkeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SubkeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubkeysItems0) UnmarshalBinary(b []byte) error {
	var res SubkeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubkeysItems0EmailsItems0 GPGKeyEmail an email attached to a GPGKey
swagger:model SubkeysItems0EmailsItems0
*/
type SubkeysItems0EmailsItems0 struct {

	// email
	Email string `json:"email,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this subkeys items0 emails items0
func (o *SubkeysItems0EmailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *SubkeysItems0EmailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubkeysItems0EmailsItems0) UnmarshalBinary(b []byte) error {
	var res SubkeysItems0EmailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubkeysItems0SubkeysItems0 GPGKey a user GPG key to sign commit and tag in repository
swagger:model SubkeysItems0SubkeysItems0
*/
type SubkeysItems0SubkeysItems0 struct {

	// can certify
	CanCertify bool `json:"can_certify,omitempty"`

	// can encrypt comms
	CanEncryptComms bool `json:"can_encrypt_comms,omitempty"`

	// can encrypt storage
	CanEncryptStorage bool `json:"can_encrypt_storage,omitempty"`

	// can sign
	CanSign bool `json:"can_sign,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"created_at,omitempty"`

	// emails
	Emails []*models.SubkeysItems0SubkeysItems0EmailsItems0 `json:"emails"`

	// expires
	// Format: date-time
	Expires strfmt.DateTime `json:"expires_at,omitempty"`

	// ID
	ID int64 `json:"id,omitempty"`

	// key ID
	KeyID string `json:"key_id,omitempty"`

	// primary key ID
	PrimaryKeyID string `json:"primary_key_id,omitempty"`

	// public key
	PublicKey string `json:"public_key,omitempty"`

	// subs key
	SubsKey []*models.GPGKey `json:"subkeys"`
}

// Validate validates this subkeys items0 subkeys items0
func (o *SubkeysItems0SubkeysItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubsKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SubkeysItems0SubkeysItems0) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SubkeysItems0SubkeysItems0) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(o.Emails) { // not required
		return nil
	}

	for i := 0; i < len(o.Emails); i++ {
		if swag.IsZero(o.Emails[i]) { // not required
			continue
		}

		if o.Emails[i] != nil {
			if err := o.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *SubkeysItems0SubkeysItems0) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(o.Expires) { // not required
		return nil
	}

	if err := validate.FormatOf("expires_at", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *SubkeysItems0SubkeysItems0) validateSubsKey(formats strfmt.Registry) error {

	if swag.IsZero(o.SubsKey) { // not required
		return nil
	}

	for i := 0; i < len(o.SubsKey); i++ {
		if swag.IsZero(o.SubsKey[i]) { // not required
			continue
		}

		if o.SubsKey[i] != nil {
			if err := o.SubsKey[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("subkeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SubkeysItems0SubkeysItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubkeysItems0SubkeysItems0) UnmarshalBinary(b []byte) error {
	var res SubkeysItems0SubkeysItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*SubkeysItems0SubkeysItems0EmailsItems0 GPGKeyEmail an email attached to a GPGKey
swagger:model SubkeysItems0SubkeysItems0EmailsItems0
*/
type SubkeysItems0SubkeysItems0EmailsItems0 struct {

	// email
	Email string `json:"email,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this subkeys items0 subkeys items0 emails items0
func (o *SubkeysItems0SubkeysItems0EmailsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *SubkeysItems0SubkeysItems0EmailsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SubkeysItems0SubkeysItems0EmailsItems0) UnmarshalBinary(b []byte) error {
	var res SubkeysItems0SubkeysItems0EmailsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UserCurrentPostGPGKeyBody CreateGPGKeyOption options create user GPG key
swagger:model UserCurrentPostGPGKeyBody
*/
type UserCurrentPostGPGKeyBody struct {

	// An armored GPG key to add
	// Required: true
	// Unique: true
	ArmoredKey *string `json:"armored_public_key"`
}

// MarshalBinary interface implementation
func (o *UserCurrentPostGPGKeyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserCurrentPostGPGKeyBody) UnmarshalBinary(b []byte) error {
	var res UserCurrentPostGPGKeyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UserCurrentPostGPGKeyCreatedBody GPGKey a user GPG key to sign commit and tag in repository
swagger:model UserCurrentPostGPGKeyCreatedBody
*/
type UserCurrentPostGPGKeyCreatedBody struct {

	// can certify
	// Required: true
	CanCertify *bool `json:"can_certify"`

	// can encrypt comms
	// Required: true
	CanEncryptComms *bool `json:"can_encrypt_comms"`

	// can encrypt storage
	// Required: true
	CanEncryptStorage *bool `json:"can_encrypt_storage"`

	// can sign
	// Required: true
	CanSign *bool `json:"can_sign"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created_at"`

	// emails
	// Required: true
	Emails []*models.EmailsItems0 `json:"emails"`

	// expires
	// Required: true
	// Format: date-time
	Expires *strfmt.DateTime `json:"expires_at"`

	// ID
	// Required: true
	ID *int64 `json:"id"`

	// key ID
	// Required: true
	KeyID *string `json:"key_id"`

	// primary key ID
	// Required: true
	PrimaryKeyID *string `json:"primary_key_id"`

	// public key
	// Required: true
	PublicKey *string `json:"public_key"`

	// subs key
	// Required: true
	SubsKey []*models.SubkeysItems0 `json:"subkeys"`
}

// Validate validates this user current post g p g key created body
func (o *UserCurrentPostGPGKeyCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCanCertify(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCanEncryptComms(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCanEncryptStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCanSign(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePrimaryKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSubsKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateCanCertify(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"can_certify", "body", o.CanCertify); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateCanEncryptComms(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"can_encrypt_comms", "body", o.CanEncryptComms); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateCanEncryptStorage(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"can_encrypt_storage", "body", o.CanEncryptStorage); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateCanSign(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"can_sign", "body", o.CanSign); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"created_at", "body", o.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("userCurrentPostGPGKeyCreated"+"."+"created_at", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateEmails(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"emails", "body", o.Emails); err != nil {
		return err
	}

	for i := 0; i < len(o.Emails); i++ {
		if swag.IsZero(o.Emails[i]) { // not required
			continue
		}

		if o.Emails[i] != nil {
			if err := o.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userCurrentPostGPGKeyCreated" + "." + "emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateExpires(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"expires_at", "body", o.Expires); err != nil {
		return err
	}

	if err := validate.FormatOf("userCurrentPostGPGKeyCreated"+"."+"expires_at", "body", "date-time", o.Expires.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateKeyID(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"key_id", "body", o.KeyID); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validatePrimaryKeyID(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"primary_key_id", "body", o.PrimaryKeyID); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"public_key", "body", o.PublicKey); err != nil {
		return err
	}

	return nil
}

func (o *UserCurrentPostGPGKeyCreatedBody) validateSubsKey(formats strfmt.Registry) error {

	if err := validate.Required("userCurrentPostGPGKeyCreated"+"."+"subkeys", "body", o.SubsKey); err != nil {
		return err
	}

	for i := 0; i < len(o.SubsKey); i++ {
		if swag.IsZero(o.SubsKey[i]) { // not required
			continue
		}

		if o.SubsKey[i] != nil {
			if err := o.SubsKey[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userCurrentPostGPGKeyCreated" + "." + "subkeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserCurrentPostGPGKeyCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserCurrentPostGPGKeyCreatedBody) UnmarshalBinary(b []byte) error {
	var res UserCurrentPostGPGKeyCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
