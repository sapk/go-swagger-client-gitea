// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// AdminCreateUserReader is a Reader for the AdminCreateUser structure.
type AdminCreateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AdminCreateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAdminCreateUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewAdminCreateUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 422:
		result := NewAdminCreateUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAdminCreateUserCreated creates a AdminCreateUserCreated with default headers values
func NewAdminCreateUserCreated() *AdminCreateUserCreated {
	return &AdminCreateUserCreated{}
}

/*AdminCreateUserCreated handles this case with default header values.

User
*/
type AdminCreateUserCreated struct {
	Payload AdminCreateUserCreatedBody
}

func (o *AdminCreateUserCreated) Error() string {
	return fmt.Sprintf("[POST /admin/users][%d] adminCreateUserCreated  %+v", 201, o.Payload)
}

func (o *AdminCreateUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAdminCreateUserForbidden creates a AdminCreateUserForbidden with default headers values
func NewAdminCreateUserForbidden() *AdminCreateUserForbidden {
	return &AdminCreateUserForbidden{}
}

/*AdminCreateUserForbidden handles this case with default header values.

APIForbiddenError is a forbidden error response
*/
type AdminCreateUserForbidden struct {
	Message string

	URL string
}

func (o *AdminCreateUserForbidden) Error() string {
	return fmt.Sprintf("[POST /admin/users][%d] adminCreateUserForbidden ", 403)
}

func (o *AdminCreateUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

// NewAdminCreateUserUnprocessableEntity creates a AdminCreateUserUnprocessableEntity with default headers values
func NewAdminCreateUserUnprocessableEntity() *AdminCreateUserUnprocessableEntity {
	return &AdminCreateUserUnprocessableEntity{}
}

/*AdminCreateUserUnprocessableEntity handles this case with default header values.

APIValidationError is error format response related to input validation
*/
type AdminCreateUserUnprocessableEntity struct {
	Message string

	URL string
}

func (o *AdminCreateUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /admin/users][%d] adminCreateUserUnprocessableEntity ", 422)
}

func (o *AdminCreateUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

/*AdminCreateUserBody CreateUserOption create user options
swagger:model AdminCreateUserBody
*/
type AdminCreateUserBody struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// full name
	FullName string `json:"full_name,omitempty"`

	// login name
	LoginName string `json:"login_name,omitempty"`

	// password
	// Required: true
	Password *string `json:"password"`

	// send notify
	SendNotify bool `json:"send_notify,omitempty"`

	// source ID
	SourceID int64 `json:"source_id,omitempty"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// MarshalBinary interface implementation
func (o *AdminCreateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminCreateUserBody) UnmarshalBinary(b []byte) error {
	var res AdminCreateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AdminCreateUserCreatedBody User represents a user
swagger:model AdminCreateUserCreatedBody
*/
type AdminCreateUserCreatedBody struct {

	// URL to the user's avatar
	// Required: true
	AvatarURL *string `json:"avatar_url"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// the user's full name
	// Required: true
	FullName *string `json:"full_name"`

	// the user's id
	// Required: true
	ID *int64 `json:"id"`

	// User locale
	// Required: true
	Language *string `json:"language"`

	// the user's username
	// Required: true
	UserName *string `json:"login"`
}

// Validate validates this admin create user created body
func (o *AdminCreateUserCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AdminCreateUserCreatedBody) validateAvatarURL(formats strfmt.Registry) error {

	if err := validate.Required("adminCreateUserCreated"+"."+"avatar_url", "body", o.AvatarURL); err != nil {
		return err
	}

	return nil
}

func (o *AdminCreateUserCreatedBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("adminCreateUserCreated"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("adminCreateUserCreated"+"."+"email", "body", "email", o.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *AdminCreateUserCreatedBody) validateFullName(formats strfmt.Registry) error {

	if err := validate.Required("adminCreateUserCreated"+"."+"full_name", "body", o.FullName); err != nil {
		return err
	}

	return nil
}

func (o *AdminCreateUserCreatedBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("adminCreateUserCreated"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *AdminCreateUserCreatedBody) validateLanguage(formats strfmt.Registry) error {

	if err := validate.Required("adminCreateUserCreated"+"."+"language", "body", o.Language); err != nil {
		return err
	}

	return nil
}

func (o *AdminCreateUserCreatedBody) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("adminCreateUserCreated"+"."+"login", "body", o.UserName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AdminCreateUserCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AdminCreateUserCreatedBody) UnmarshalBinary(b []byte) error {
	var res AdminCreateUserCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
