// Code generated by go-swagger; DO NOT EDIT.

package miscellaneous

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// RenderMarkdownReader is a Reader for the RenderMarkdown structure.
type RenderMarkdownReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RenderMarkdownReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewRenderMarkdownOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 422:
		result := NewRenderMarkdownUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRenderMarkdownOK creates a RenderMarkdownOK with default headers values
func NewRenderMarkdownOK() *RenderMarkdownOK {
	return &RenderMarkdownOK{}
}

/*RenderMarkdownOK handles this case with default header values.

MarkdownRender is a rendered markdown document
*/
type RenderMarkdownOK struct {
}

func (o *RenderMarkdownOK) Error() string {
	return fmt.Sprintf("[POST /markdown][%d] renderMarkdownOK ", 200)
}

func (o *RenderMarkdownOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRenderMarkdownUnprocessableEntity creates a RenderMarkdownUnprocessableEntity with default headers values
func NewRenderMarkdownUnprocessableEntity() *RenderMarkdownUnprocessableEntity {
	return &RenderMarkdownUnprocessableEntity{}
}

/*RenderMarkdownUnprocessableEntity handles this case with default header values.

APIValidationError is error format response related to input validation
*/
type RenderMarkdownUnprocessableEntity struct {
	Message string

	URL string
}

func (o *RenderMarkdownUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /markdown][%d] renderMarkdownUnprocessableEntity ", 422)
}

func (o *RenderMarkdownUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header message
	o.Message = response.GetHeader("message")

	// response header url
	o.URL = response.GetHeader("url")

	return nil
}

/*RenderMarkdownBody MarkdownOption markdown options
swagger:model RenderMarkdownBody
*/
type RenderMarkdownBody struct {

	// Context to render
	//
	// in: body
	Context string `json:"Context,omitempty"`

	// Mode to render
	//
	// in: body
	Mode string `json:"Mode,omitempty"`

	// Text markdown to render
	//
	// in: body
	Text string `json:"Text,omitempty"`

	// Is it a wiki page ?
	//
	// in: body
	Wiki bool `json:"Wiki,omitempty"`
}

// MarshalBinary interface implementation
func (o *RenderMarkdownBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RenderMarkdownBody) UnmarshalBinary(b []byte) error {
	var res RenderMarkdownBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
