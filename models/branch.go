// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Branch Branch represents a repository branch
// swagger:model Branch
type Branch struct {

	// name
	Name string `json:"name,omitempty"`

	// commit
	Commit *BranchCommit `json:"commit,omitempty"`
}

// Validate validates this branch
func (m *Branch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Branch) validateCommit(formats strfmt.Registry) error {

	if swag.IsZero(m.Commit) { // not required
		return nil
	}

	if m.Commit != nil {
		if err := m.Commit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Branch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Branch) UnmarshalBinary(b []byte) error {
	var res Branch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchCommit PayloadCommit represents a commit
// swagger:model BranchCommit
type BranchCommit struct {

	// sha1 hash of the commit
	ID string `json:"id,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// URL
	URL string `json:"url,omitempty"`

	// author
	Author *BranchCommitAuthor `json:"author,omitempty"`

	// committer
	Committer *BranchCommitCommitter `json:"committer,omitempty"`

	// verification
	Verification *BranchCommitVerification `json:"verification,omitempty"`
}

// Validate validates this branch commit
func (m *BranchCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchCommit) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("commit"+"."+"timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *BranchCommit) validateAuthor(formats strfmt.Registry) error {

	if swag.IsZero(m.Author) { // not required
		return nil
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit" + "." + "author")
			}
			return err
		}
	}

	return nil
}

func (m *BranchCommit) validateCommitter(formats strfmt.Registry) error {

	if swag.IsZero(m.Committer) { // not required
		return nil
	}

	if m.Committer != nil {
		if err := m.Committer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit" + "." + "committer")
			}
			return err
		}
	}

	return nil
}

func (m *BranchCommit) validateVerification(formats strfmt.Registry) error {

	if swag.IsZero(m.Verification) { // not required
		return nil
	}

	if m.Verification != nil {
		if err := m.Verification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit" + "." + "verification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchCommit) UnmarshalBinary(b []byte) error {
	var res BranchCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchCommitAuthor PayloadUser represents the author or committer of a commit
// swagger:model BranchCommitAuthor
type BranchCommitAuthor struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// Full name of the commit author
	Name string `json:"name,omitempty"`

	// user name
	UserName string `json:"username,omitempty"`
}

// Validate validates this branch commit author
func (m *BranchCommitAuthor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchCommitAuthor) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("commit"+"."+"author"+"."+"email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchCommitAuthor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchCommitAuthor) UnmarshalBinary(b []byte) error {
	var res BranchCommitAuthor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchCommitCommitter PayloadUser represents the author or committer of a commit
// swagger:model BranchCommitCommitter
type BranchCommitCommitter struct {

	// email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// Full name of the commit author
	Name string `json:"name,omitempty"`

	// user name
	UserName string `json:"username,omitempty"`
}

// Validate validates this branch commit committer
func (m *BranchCommitCommitter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BranchCommitCommitter) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("commit"+"."+"committer"+"."+"email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BranchCommitCommitter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchCommitCommitter) UnmarshalBinary(b []byte) error {
	var res BranchCommitCommitter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// BranchCommitVerification PayloadCommitVerification represents the GPG verification of a commit
// swagger:model BranchCommitVerification
type BranchCommitVerification struct {

	// payload
	Payload string `json:"payload,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// signature
	Signature string `json:"signature,omitempty"`

	// verified
	Verified bool `json:"verified,omitempty"`
}

// Validate validates this branch commit verification
func (m *BranchCommitVerification) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BranchCommitVerification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BranchCommitVerification) UnmarshalBinary(b []byte) error {
	var res BranchCommitVerification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
